<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>七天太乐</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>七天都要快乐 (★≧▽^))★☆</description>
    <pubDate>Mon, 26 Jun 2023 13:53:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>复杂性理论复习</title>
      <link>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/</link>
      <guid>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/</guid>
      <pubDate>Mon, 26 Jun 2023 06:58:32 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;复杂性理论复习综述&quot;&gt;&lt;a href=&quot;#复杂性理论复习综述&quot; class=&quot;headerlink&quot; title=&quot;复杂性理论复习综述&quot;&gt;&lt;/a&gt;复杂性理论复习综述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;理论计算机的核心目标：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;把计算任务按照其本质难度进行分类&lt;/font&gt;                                                     &lt;img src=&quot;https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230626150513090.png&quot; alt=&quot;image-20230626150513090&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;复习重点：判定问题；图灵机构造和基本思想；什么是P、NP、NPC问题及NP问题之间的规约和常见的NPC问题；SAT、2SAT、3SAT问题；递归算法和非递归算法特点和区别；复杂度分析方法区别；会写素数判定的递归和非递归算法&lt;/font&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="复杂性理论复习综述"><a href="#复杂性理论复习综述" class="headerlink" title="复杂性理论复习综述"></a>复杂性理论复习综述</h1><p><strong>理论计算机的核心目标：</strong></p><p><font color=red>把计算任务按照其本质难度进行分类</font>                                                     <img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230626150513090.png" alt="image-20230626150513090"></p><p><font color=red>复习重点：判定问题；图灵机构造和基本思想；什么是P、NP、NPC问题及NP问题之间的规约和常见的NPC问题；SAT、2SAT、3SAT问题；递归算法和非递归算法特点和区别；复杂度分析方法区别；会写素数判定的递归和非递归算法</font></p><span id="more"></span><h2 id="1-什么是可计算问题？什么是不可计算问题？"><a href="#1-什么是可计算问题？什么是不可计算问题？" class="headerlink" title="1.什么是可计算问题？什么是不可计算问题？"></a>1.什么是可计算问题？什么是不可计算问题？</h2><p><font color=pink>可计算问题</font>当且仅当该问题可以在图灵机上经过有限步骤后可以得到正确的结果。相反地，不能由图灵机解决的问题叫做<font color=pink>不可计算问题</font>。</p><h2 id="2-什么是计算复杂性？计算复杂性理论主要研究什么？"><a href="#2-什么是计算复杂性？计算复杂性理论主要研究什么？" class="headerlink" title="2.什么是计算复杂性？计算复杂性理论主要研究什么？"></a>2.什么是计算复杂性？计算复杂性理论主要研究什么？</h2><p><font color=pink>计算复杂性</font>就是用计算机求解问题的难易程度，使用数学方法对计算中所需的各种资源消耗作定量的分析，并研究各类问题之间在计算复杂程度上的相互关系和性质。                                                                     <font color=pink>主要研究</font>计算问题时所需要的资源，比如时间和空间，以及如何尽可能的节省这些资源。</p><h2 id="3-什么是算法？算法有哪些特点？"><a href="#3-什么是算法？算法有哪些特点？" class="headerlink" title="3.什么是算法？算法有哪些特点？"></a>3.什么是算法？算法有哪些特点？</h2><p><font color=pink>算法</font>是对解决方案的准确而完整的描述。                                                                                                              <font color=pink>特点</font>：有穷性，可行性，确定性，输入和输出</p><h2 id="4-描述算法的方法有？"><a href="#4-描述算法的方法有？" class="headerlink" title="4.描述算法的方法有？"></a>4.描述算法的方法有？</h2><p>自然语言、流程图、N-S图、伪代码、程序设计语言</p><h2 id="5-如何分析算法的效率？"><a href="#5-如何分析算法的效率？" class="headerlink" title="5.如何分析算法的效率？"></a><font color=red>5.如何分析算法的效率？</font></h2><p>算法的效率分析指对算法在运行时间和存储空间这两种资源的利用效率进行研究。对于一般算法，关注其输入规模，运行时间的度量单位，增长效率和算法的最优最差平均效率；对于递归算法，则需要关注递归的深度，先对算法建立一个递归关系，设置初始条件，在求解分析。</p><h2 id="6-渐进表达式O-g-n-，Θ-g-n-，Ω-g-n-的定义和表达含义？"><a href="#6-渐进表达式O-g-n-，Θ-g-n-，Ω-g-n-的定义和表达含义？" class="headerlink" title="6.渐进表达式O(g(n))，Θ(g(n))，Ω(g(n))的定义和表达含义？"></a><font color=red>6.渐进表达式O(g(n))，Θ(g(n))，Ω(g(n))的定义和表达含义？</font></h2><p><font color=pink>O(g(n))</font>：如果函数t(n)包含在O(g(n))中，对于所有足够大的n，t(n)的上界由g(n)的常数倍确定，即存在大于0的常数和非负的整数n0使得对于所有的 n≥n0 ，有 cg(n)≥t(n)<br>表达含义：g(n)≥该算法的时间复杂度</p><p><font color=pink>Θ(g(n))</font>：如果函数t包含在Θ(g(n))中，对于所有足够大的n，t(n)的上下界都由g的常数倍确定，即存在大于0的常数c1,c2和非负的整数n0使得所有 n≥n0 ，有 c1g(n)≥t(n)≥c2g(n)<br>表达含义：g(n)&#x3D;该算法的时间复杂度</p><p><font color=pink>Ω(g(n))</font>：<br>表达含义：该算法的时间复杂度≥g(n)</p><h2 id="7-递归和非递归算法时间效率的数学分析方法区别？"><a href="#7-递归和非递归算法时间效率的数学分析方法区别？" class="headerlink" title="7.递归和非递归算法时间效率的数学分析方法区别？"></a><font color=red>7.递归和非递归算法时间效率的数学分析方法区别？</font></h2><p>见5</p><h2 id="8-Fibonacci-numbers-F-N-x3D-F-N-1-F-N-2-的时间复杂度表达式？"><a href="#8-Fibonacci-numbers-F-N-x3D-F-N-1-F-N-2-的时间复杂度表达式？" class="headerlink" title="8.Fibonacci numbers F(N) &#x3D; F(N-1) + F(N-2)的时间复杂度表达式？"></a>8.Fibonacci numbers F(N) &#x3D; F(N-1) + F(N-2)的时间复杂度表达式？</h2><p><font color=pink>递归法</font>：O(2^N)<br><font color=pink>公式计算法</font>：O(1)</p><h2 id="9-经典排序问题的算法时间复杂度下界？"><a href="#9-经典排序问题的算法时间复杂度下界？" class="headerlink" title="9.经典排序问题的算法时间复杂度下界？"></a>9.经典排序问题的算法时间复杂度下界？</h2><table><thead><tr><th align="center">排序方法</th><th align="center">时间复杂度(平均)</th><th align="center">时间复杂度(最坏)</th><th align="center">时间复杂度(最好)</th><th align="center">空间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">插入排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O(n^1.3)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">快速排序</td><td align="center">O(nlogn)</td><td align="center">O(n^2)</td><td align="center">O(nlogn)</td><td align="center">O(logn)</td><td align="center">不稳定</td></tr><tr><td align="center">冒泡排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">基数排序</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">桶排序</td><td align="center">O(n+k)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr></tbody></table><h2 id="10-算法性能提升的本质是什么？提升算法效率的四个层次是什么？"><a href="#10-算法性能提升的本质是什么？提升算法效率的四个层次是什么？" class="headerlink" title="10.算法性能提升的本质是什么？提升算法效率的四个层次是什么？"></a>10.算法性能提升的本质是什么？提升算法效率的四个层次是什么？</h2><p><font color=pink>提升的本质</font>：本质式效率，就是让计算机少做事情。效率&#x3D;产出&#x2F;所做的事，产出难提高，所做事情可以减少<br><font color=pink>四个层次</font>：正确性；易读性；健壮性；时空性。</p><h2 id="11-为什么超越多项式时间复杂度的精确算法一般是不可接受的？"><a href="#11-为什么超越多项式时间复杂度的精确算法一般是不可接受的？" class="headerlink" title="11.为什么超越多项式时间复杂度的精确算法一般是不可接受的？"></a><font color=red>11.为什么超越多项式时间复杂度的精确算法一般是不可接受的？</font></h2><p><font color=pink>时间复杂度并不表示一个程序解决需要多少时间，而是当问题规模扩大后，程序需要的时间随规模的增长有多快。</font><br>一个优化问题如果已经找到了多项式时间算法，称该问题为多项式时间可解问题，并将这类问题的集合记为P，即<font color=pink>多项式时间可解问题</font>为P类问题。<br>一个问题没有找到多项式时间算法，在直觉上他是“难解”的，但又无法证明多项式时间算法的不存在性。一方面证明一个问题不存在多项式时间算法是困难的；另一方面，有越来越多的问题无法给出多项式时间算法。<br><font color=pink>NP-完全性理论的核心思想</font>：如果一个问题是NP类问题，并且存在一个能够在多项式时间内转换为该问题的解的算法，那么该问题就是NP-完全问题。<font color=pink>一个问题是NP-完全问题意味着他是NP类问题中最困难的问题之一</font>。其重要性在于：<font color=red>如果能够证明某个问题是NP-完全问题，那么就可以推导出其他许多问题也是NP-完全问题</font>。</p><h2 id="12-什么是图灵机？什么是图灵测试？什么是图灵命题？"><a href="#12-什么是图灵机？什么是图灵测试？什么是图灵命题？" class="headerlink" title="12.什么是图灵机？什么是图灵测试？什么是图灵命题？"></a><font color=red>12.什么是图灵机？什么是图灵测试？什么是图灵命题？</font></h2><p><font color=pink>图灵机</font>：又称图灵计算机，指一种抽象的计算模型，即将人使用纸笔进行数学运算的过程进行抽象，由一个虚拟机器替代人类进行数学运算。<br>其有一个无限长的纸带，纸带分成一个一个方格，每个方格有不同颜色，一个机器头在纸带上移动。机器头有一组内部状态和一些固定程序。每个时刻，机器头从当前纸带读入一个方格的信息，然后结合内部状态查找程序表，根据程序输出信息到纸带方格中，并转换自己的内部状态，进行移动。</p><p><font color=pink>图灵测试</font>：指测试者和被测试者隔开的情况下，通过一些装置向被测试者随意提问。进行多次测试后，如果机器让平均每个参与者做出了超过30%的误判，那么这台机器就通过了测试，并认为具有人类智能。</p><p><font color=pink>图灵命题</font>：可计算性理论的基本论题，一个函数是可计算的当且仅当可由一部图灵机来计算它。</p><h2 id="13-图灵机的基本原理及组成部分？什么是格局？"><a href="#13-图灵机的基本原理及组成部分？什么是格局？" class="headerlink" title="13.图灵机的基本原理及组成部分？什么是格局？"></a><font color=red>13.图灵机的基本原理及组成部分？什么是格局？</font></h2><p><font color=pink>图灵机基本原理</font>：其有一条无限长的纸带，纸带分成一个一个小方格，每个方格有不同的颜色。一个机器头在纸带上移动。机器头有一组内部状态和一些固定程序。每个时刻，机器头从当前纸带读入一个方格的信息，然后结合内部状态查找程序表，根据程序输出信息到纸带方格中，并转换自己的内部状态，进行移动。<br><font color=pink>组成部分</font>：a.纸带，被分成许多个方格，符号可以写入或者读出；b.可以移动的读写头，能从纸带读取或写入符号；c.指示读写头下一步如何操作的一组规则。<br><font color=pink>格局</font>：格局是图灵机的一个快照。将图灵机计算过程每一个步骤都找一份快照，通过轨迹将这些快照联系在一起，就可以得到一个数据结构。</p><h2 id="14-为什么说所有计算或算法都可以由一台图灵机来执行？"><a href="#14-为什么说所有计算或算法都可以由一台图灵机来执行？" class="headerlink" title="14.为什么说所有计算或算法都可以由一台图灵机来执行？"></a><font color=red>14.为什么说所有计算或算法都可以由一台图灵机来执行？</font></h2><p>邱奇-图灵论题最基本的观点表明，所有计算或算法都可以由一台图灵机来执行。以任何常规编程语言编写的计算机程序都可以翻译成一台图灵机，反之任何一台图灵机也都可以翻译成大部分编程语言的程序，所以该论题和一下说法等价：常规的编程语言可以足够有效地来表达任何算法。该论题被普遍认定为真。</p><h2 id="15-如何从图灵机视角看待算法的时间复杂度和空间复杂度？"><a href="#15-如何从图灵机视角看待算法的时间复杂度和空间复杂度？" class="headerlink" title="15.如何从图灵机视角看待算法的时间复杂度和空间复杂度？"></a><font color=red>15.如何从图灵机视角看待算法的时间复杂度和空间复杂度？</font></h2><p><font color=pink>图灵机程序的复杂度</font>由外部的输入和输出来决定图灵机内部的算法的时间和空间的复杂度。<br><font color=pink>图灵机的时间复杂度T(n)</font>是它处理所有长度为n的输入所需要的最大计算步数。如果对于某个长度为n的输入，图灵机不停机，则T(n)对这个值无定义。<br><font color=pink>图灵机的空间复杂性S(n)</font>是它处理所有长度为n的输入时，在纸带上所使用过的方格总数。如果某个读写头无限的向右移动而不停机，S(n)也无定义。</p><h2 id="16-什么是确定性图灵机、非确定性图灵机和概率图灵机？"><a href="#16-什么是确定性图灵机、非确定性图灵机和概率图灵机？" class="headerlink" title="16.什么是确定性图灵机、非确定性图灵机和概率图灵机？"></a><font color=red>16.什么是确定性图灵机、非确定性图灵机和概率图灵机？</font></h2><p><font color=pink>确定性图灵机(DTM)</font>：在DTM中，其控制规则规定了在任何给定的情况下最多只能执行一个动作。确定性图灵机具有转换功能，对于磁带头下的给定状态和符号，该转换功能指定了三件事：要写入磁带的符号，头部应移动的方向，以及有限控制的后续状态。<br><font color=pink>非确定性图灵机(NTM)</font>：在理论计算机科学中，非确定性图灵机是一种理论计算模型，其控制规则在某些给定情况下指定了多个可能的动作。NTM的下一个状态不是完全由其动作和它所看到的当前符号决定的。<br><font color=pink>概率图灵机(PTM)</font>：一种非确定型图灵机，每走一步在两个转移函数之间随机地选取一个。概率图灵机是依照随机带上写下的0和1来决定下一步怎么走。</p><h2 id="17-什么是识别问题？什么是判定问题？什么是PT验证器？"><a href="#17-什么是识别问题？什么是判定问题？什么是PT验证器？" class="headerlink" title="17.什么是识别问题？什么是判定问题？什么是PT验证器？"></a>17.什么是识别问题？<font color=red>什么是判定问题？什么是PT验证器？</font></h2><p><font color=pink>识别问题</font>：当且仅当图灵机接受字符串时，当提供的输入位于语言中时，语言才是可识别的。此外，如果TM终止并拒绝字符串或根本不终止，则可以识别语言。这意味着当提供的输入不在语言中时，TM继续计算。然而，当且仅当由一台机器在提供的输入位于该语言中时接受字符串并在提供的输入不在该语言中时拒绝该字符串，该语言才是可判定的。<br><font color=pink>判定问题</font>：有些语言可被判定器判定。如果存在不可判定语言，那么必然存在不可识别语言。就是无法构造一个图灵机，接受这个语言的每一个字符串。所以如果一个语言不可判定，必然它或者它的补是不可识别的。不可识别的语言是存在的。一个不可判定的语言就是一个不可计算的问题。那是一个超出了计算机能力的问题，一个不能被任何有步骤的、确定性的算法所能解决的问题。<font color=pink>即不用求解，判定是否是解</font><br><font color=pink>PT验证器</font>：多项式图灵机</p><h2 id="18-什么是P，NP，NPC，NP-hard？"><a href="#18-什么是P，NP，NPC，NP-hard？" class="headerlink" title="18.什么是P，NP，NPC，NP-hard？"></a><font color=red>18.什么是P，NP，NPC，NP-hard？</font></h2><p><font color=pink>P</font>：一个问题如果在图灵机上所需时间不会超过一个确定的多项式，称此类问题的集合为P，通俗来讲，P问题就是多项式时间可解的问题；<br><font color=pink>NP</font>：可以在非确定型图灵机上在多项式时间内找出解的问题的集合。如果一个问题，可以在多项式时间内验证它的解是否正确，则该问题是一个NP问题。显然 P∈NP(注：到目前为止，P!&#x3D;NP)<br><font color=pink>NPC(NP-Complete)</font>：一个决定性问题C若是NPC，则代表它对NP是完备的，这表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.该问题是一个NP问题</span><br><span class="line">b.所有属于NP的问题都可以归约成该问题</span><br></pre></td></tr></table></figure><p>对于一个NPC问题，我们不可能尝试将所有的NP规约到它，所以通常采用一下方法证明一个问题是NPC问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.证明给定问题的一个解，可以在多项式时间验证该问题</span><br><span class="line">b.可以将一个已知的NPC问题归约到该问题</span><br></pre></td></tr></table></figure><p>在计算复杂度理论中，第一个被证明的NPC问题是布尔可满足性问题。所以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可满足问题属于NPC问题。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可满足性问题(SAT)：</span><br><span class="line">可满足问题是判断仍以给定的一个布尔表达式是否存在一个真赋值，存在则称该布尔表达式可满足</span><br></pre></td></tr></table></figure><p><font color=pink>NP-hard</font>:相较于NPC问题，NP-hard问题只满足条件2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">即所有的NP问题都可以归约到NP-hard问题，即NPC问题可以归约到NP-hard</span><br><span class="line">其次他不一定是NP问题，如下图所示</span><br><span class="line">通常通过将一个已知的NPC问题归约到该问题证明NP-Hard</span><br></pre></td></tr></table></figure><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230626195253002.png" alt="image-20230626195253002" style="zoom:60%;" /><h2 id="19-为什么说计算复杂性理论的首要问题是P-x3D-NP？它的内涵是什么？为什么说P-x3D-NP不可思议？"><a href="#19-为什么说计算复杂性理论的首要问题是P-x3D-NP？它的内涵是什么？为什么说P-x3D-NP不可思议？" class="headerlink" title="19.为什么说计算复杂性理论的首要问题是P&#x3D;NP？它的内涵是什么？为什么说P&#x3D;NP不可思议？"></a><font color=red>19.为什么说计算复杂性理论的首要问题是P&#x3D;NP？它的内涵是什么？为什么说P&#x3D;NP不可思议？</font></h2><p><font color=pink>a</font>.自从P&#x3D;NP问题被正式提出后，有NP完备理论赋予其在实践上的重要性，有证明复杂性理论赋予其纯数学理论上的重要性，有PCP理论和NP完备理论赋予其算法理论上的重要性。这些理论从根本上依赖P与NP关系问题的某些假设，或者本身就是试图去理解NP和P关系问题而发展出来的。计算复杂性理论的基本的主题之一是算法所需资源的下界。<br><font color=pink>b</font>.“P&#x2F;NP”问题，这里的P指多项式时间，假如NP问题能找到算法使其在多项式时间内解决，也就证明了P&#x3D;NP<br><font color=pink>c</font>.如果P&#x3D;NP，那么每个答案很容易得到验证的问题也同样可以轻松求解，这将对计算机安全构成巨大威胁。目前加密系统的破解就相当于要将一个整数分解成几个因数的乘积，正是其求解过程的繁琐，才能杜绝黑客入侵。如果证明了P&#x3D;NP，那么依据计算复杂性的密码就没有用途。如果P&#x3D;NP，那么所有的NP问题都存在有效的解决方案，而对于NP-hard问题，及时P&#x3D;NP，也不一定有解。同时如果证明了P!&#x3D;NP，那么大素数的分解还是不是NPC的？证明RSA、DES等密码的安全性比证明P&#x2F;NP还困难。</p><h2 id="20-简述Cook-Levin定理，为什么该定理如此重要？"><a href="#20-简述Cook-Levin定理，为什么该定理如此重要？" class="headerlink" title="20.简述Cook-Levin定理，为什么该定理如此重要？"></a>20.简述Cook-Levin定理，为什么该定理如此重要？</h2><p><font color=pink>Cook-Levin定理</font>：表明布尔可满足问题是NPC的。也就是说，NP中的任何问题都可以通过DTM在多项式时间内减少到确定布尔公式是否可满足的问题。如果可以在多项式时间内通过非确定性算法求解，则决策问题在NP中。<br><font color=pink>为什么如此重要</font>：给定NP中的任何决策问题，构造一个在多项式时间内解决它的非确定性机器。然后，对于该机器的每个输入，构建一个布尔表达式，表示输入传递给机器，机器正确运行并停止回答“是”。证明表明NP中的任何问题都可以在多项式时间中减少到布尔可满足问题的实例。这意味着如果布尔可满足问题可以通过确定性图灵机在多项式时间内解决，则NP中的所有问题都可以在多项式时间内求解，因此证明P&#x3D;NP</p><h2 id="21-什么是归约？常见的归约方法？"><a href="#21-什么是归约？常见的归约方法？" class="headerlink" title="21.什么是归约？常见的归约方法？"></a><font color=red>21.什么是归约？常见的归约方法？</font></h2><p><font color=pink>归约</font>：一个问题A可以归约到一个问题B的含义是可以用解决B的方法解决A，也就是说找到了解决A的方法。因此可知，问题A不一定比问题B难，<font color=pink>即B更难</font>至少两个问题是同样难度的。<br><font color=pink>详细定义</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于问题A和问题B，如果存在一个可计算的函数f，使得对于任意问题A的实例x有：</span><br></pre></td></tr></table></figure><p>$$<br>A(x) &#x3D; B(f(x))<br>$$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们就说问题A可以被归约到问题B</span><br><span class="line">归约方法：Many-one归约，图灵归约，Karp归约，Levin归约，Cook归约</span><br></pre></td></tr></table></figure><h2 id="22-如何判定一个问题是NPC问题？"><a href="#22-如何判定一个问题是NPC问题？" class="headerlink" title="22.如何判定一个问题是NPC问题？"></a><font color=red>22.如何判定一个问题是NPC问题？</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.是一个NP问题</span><br><span class="line">b.所有NP问题都可归约到它</span><br><span class="line">（见18）</span><br></pre></td></tr></table></figure><h2 id="23-什么是停机判定问题？其哲学思想是什么？"><a href="#23-什么是停机判定问题？其哲学思想是什么？" class="headerlink" title="23.什么是停机判定问题？其哲学思想是什么？"></a><font color=red>23.什么是停机判定问题？其哲学思想是什么？</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">停机判定：给定一个图灵机T和一个任意语言集合S，T是否会最终停机于每一个s∈S。</span><br><span class="line">意义：其意义相同与可确定语言。显然任意有限S是可判定性的，可列S也是停机的。</span><br></pre></td></tr></table></figure><h2 id="24-求解NP问题的一般方法？"><a href="#24-求解NP问题的一般方法？" class="headerlink" title="24.求解NP问题的一般方法？"></a>24.求解NP问题的一般方法？</h2><p>a.<font color=pink>动态规划法与分支界限法</font>：对于许多NPC问题来说，用此方法可以得到较高的解题效率？<br>b.<font color=pink>概率分析</font>：对于许多NPC问题，其困难实例出现概率小，平均性能好<br>c.<font color=pink>近似算法</font>：近似解代替最优解<br>d.<font color=pink>启发式算法</font>：别的方法不奏效</p><h2 id="25-2SAT为什么是P问题？"><a href="#25-2SAT为什么是P问题？" class="headerlink" title="25.2SAT为什么是P问题？"></a><font color=red>25.2SAT为什么是P问题？</font></h2><p><font color=pink>2SAT</font>问题之所以属于P问题，是因为存在一种多项式时间复杂度的算法来解决它，也就是<font color=pink>强连通分量算法</font>。其将2SAT问题转化为<font color=pink>有向图问题</font>，并查找图中的强连通分量。此算法可以在多项式时间内完成。</p><p><font color=pink>证明如下</font>：</p><p>构造一张有向图G，把其中的每个变量拆成两个节点<strong>2i</strong>和<strong>2i+1</strong>，分别表示<strong>xi</strong>为假和<strong>xi</strong>为真，最后要为每个变量选择其中一个节点打标记。对于“<strong>xi</strong>为假或<strong>xj</strong>为假”这样的条件，我们连一条有向边<br>$$<br>2i+1&#x3D;&gt;2j<br>$$<br>表示<strong>xi</strong>为真时<strong>xj</strong>必须为假，同理，还需要连一条有向边<br>$$<br>2j+1&#x3D;&gt;2i<br>$$<br>其他条件类似，每个条件对应两条“<strong>对称</strong>”的边，整张图实际上描述了一系列必须满足的关系，选择<strong>u</strong>的情况下必须选择它所能到的所有点。</p><p>对于一个没有打标记的变量<strong>xi</strong>，我们先假定它为假，然后标记节点<strong>2i</strong>，并且沿着有向边标记所有能标记的节点。如果标记过程中发现某个变量对应的两个节点都被标记，则“<strong>xi</strong>为假”这个假定不成立，需要改成“<strong>xi</strong>为真，然后重新标记。整个算法没有回溯过程，如果当前考虑的变量不管赋值为真还是假都会引起矛盾，可以证明整个2SAT问题无解。</p><h2 id="26-什么是随机算法？作用和意义？举例"><a href="#26-什么是随机算法？作用和意义？举例" class="headerlink" title="26.什么是随机算法？作用和意义？举例"></a><font color=red>26.什么是随机算法？作用和意义？举例</font></h2><h2 id="27-单向函数的意义及作用？举例"><a href="#27-单向函数的意义及作用？举例" class="headerlink" title="27.单向函数的意义及作用？举例"></a>27.单向函数的意义及作用？举例</h2><h2 id="28-交互式证明思想和方法？举例"><a href="#28-交互式证明思想和方法？举例" class="headerlink" title="28.交互式证明思想和方法？举例"></a><font color=red>28.交互式证明思想和方法？举例</font></h2><h2 id="29-对角线方法思想？举例"><a href="#29-对角线方法思想？举例" class="headerlink" title="29.对角线方法思想？举例"></a>29.对角线方法思想？举例</h2><h2 id="30-三种基本算法设计范式"><a href="#30-三种基本算法设计范式" class="headerlink" title="30.三种基本算法设计范式"></a>30.三种基本算法设计范式</h2><ul><li><font color=pink>有理论保证的算法</font><ul><li>精确算法</li><li>近似算法</li></ul></li><li><font color=pink>启发式算法</font><ul><li>在现实中往往有很好的性能</li><li>但有时候会崩溃或者性能很差</li></ul></li><li><font color=pink>机器学习习得的算法</font><ul><li>让机器自己学习一个算法</li><li>有一定通用性，但可解释性比较差</li></ul></li></ul><h2 id="31-剖析计算复杂性和密码安全的关系"><a href="#31-剖析计算复杂性和密码安全的关系" class="headerlink" title="31.剖析计算复杂性和密码安全的关系"></a>31.剖析计算复杂性和密码安全的关系</h2><h2 id="32-如何理解：计算复杂性理论是计算机科学的哲学"><a href="#32-如何理解：计算复杂性理论是计算机科学的哲学" class="headerlink" title="32.如何理解：计算复杂性理论是计算机科学的哲学"></a>32.如何理解：计算复杂性理论是计算机科学的哲学</h2><h2 id="33-如何理解随机算法在密码学中的作用和地位？"><a href="#33-如何理解随机算法在密码学中的作用和地位？" class="headerlink" title="33.如何理解随机算法在密码学中的作用和地位？"></a><font color=red>33.如何理解随机算法在密码学中的作用和地位？</font></h2><p><font color=pink>随机算法</font>生成的随机数在密码学中占有重要的地位，几乎所有的密码算法都要用到一些对攻击者来说必须是秘密的数据，而其中<font color=pink>密钥必须是随机数</font>。</p><h2 id="34-简述素数问题PRIME及其复杂性分析？"><a href="#34-简述素数问题PRIME及其复杂性分析？" class="headerlink" title="34.简述素数问题PRIME及其复杂性分析？"></a>34.简述素数问题PRIME及其复杂性分析？</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定M，求[0,M]中素数的个数</span><br></pre></td></tr></table></figure></blockquote><p><font color=orange>复杂性分析</font>：<br><font color=pink>穷举法</font>：<br>$$<br>O(N^2)<br>$$<br><font color=pink>检测到根号N</font>：<br>$$<br>O(根号N)<br>$$<br><font color=pink>埃拉托色尼筛选算法</font>：<br>$$<br>O(根号N&#x2F;logN)<br>$$<br><font color=pink>欧拉筛选法</font>：<br>$$<br>O(N)<br>$$</p><h2 id="35-简述零知识证明的基本思想"><a href="#35-简述零知识证明的基本思想" class="headerlink" title="35.简述零知识证明的基本思想"></a>35.简述零知识证明的基本思想</h2><p>证明者能够在不向验证者提供任何新知识的情况下，使验证者相信某个断言或定理的真实性。</p><h2 id="36-一个算法问题交给你后，应该怎么处理？"><a href="#36-一个算法问题交给你后，应该怎么处理？" class="headerlink" title="36.一个算法问题交给你后，应该怎么处理？"></a>36.一个算法问题交给你后，应该怎么处理？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.建模：对输入参数和解给出形式化或半形式化的描述</span><br><span class="line">b.设计算法：采用什么算法设计</span><br><span class="line"> 正确性：是否所有实例均有正确解</span><br><span class="line">c.分析：分析算法效率</span><br></pre></td></tr></table></figure><h2 id="37-计算复杂性理论的认识？对今后学习的启发？"><a href="#37-计算复杂性理论的认识？对今后学习的启发？" class="headerlink" title="37.计算复杂性理论的认识？对今后学习的启发？"></a>37.计算复杂性理论的认识？对今后学习的启发？</h2><h2 id="38-结合计算复杂性理论浅谈对云计算、大数据、物联网、人工智能安全思考？"><a href="#38-结合计算复杂性理论浅谈对云计算、大数据、物联网、人工智能安全思考？" class="headerlink" title="38.结合计算复杂性理论浅谈对云计算、大数据、物联网、人工智能安全思考？"></a>38.结合计算复杂性理论浅谈对云计算、大数据、物联网、人工智能安全思考？</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/liusiqian0209/article/details/49837447">(118条消息) NP完全性理论简介_np完整性_liusiqian0209的博客-CSDN博客</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/">大学</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/">大三下</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA/">复杂性理论</category>
      
      
      <category domain="http://example.com/tags/%E5%A4%8D%E4%B9%A0/">复习</category>
      
      
      <comments>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Android编程</title>
      <link>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/</link>
      <guid>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/</guid>
      <pubDate>Sun, 25 Jun 2023 11:43:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Android编程&quot;&gt;&lt;a href=&quot;#Android编程&quot; class=&quot;headerlink&quot; title=&quot;Android编程&quot;&gt;&lt;/a&gt;Android编程&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Android编程"><a href="#Android编程" class="headerlink" title="Android编程"></a>Android编程</h1><span id="more"></span><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="Android应用程序编译过程"><a href="#Android应用程序编译过程" class="headerlink" title="Android应用程序编译过程"></a>Android应用程序编译过程</h3><p>（1）aapt编译应用程序中使用的各种资源</p><p>（2）aidl将aidl文件转换为Java接口</p><p>（3）所有的Java文件，包括应用中的源代码以及生成的R.java文件和Java接口，都将通过Java编译器编译后生成.class字节码文件，.class字节码文件是Java虚拟机可执行的文件。</p><p>（4）所有的.class文件，都将通过dex工具编译成.dex文件。.dex文件是Android虚拟机Dalvik可执行的文件。</p><p>（5）apk构建工具将.dex文件打包，生成可运行的.apk文件。</p><p>（6）签名压缩apk文件，进行优化。</p><h3 id="Android应用程序的运行过程"><a href="#Android应用程序的运行过程" class="headerlink" title="Android应用程序的运行过程"></a>Android应用程序的运行过程</h3><p>（1）读取build.grandle文件，获得应用编译的基本信息。</p><p>（2）AndroidManifest.xml清单文件，包含命名空间，应用程序包名，应用信息，是否允许备份，应用程序的图标，标签，是否支持Rtl，圆角矩形图标，应用程序的主题，Activity名称，启动的过滤条件，入口。</p><p>（3）根据配置找到启动的类MainActivity并创建对象。</p><p>（4）自动调用onCreate()方法，设置activity_main.xml布局文件</p><h3 id="res目录下各文件夹与R-java中的类与成员变量之间有什么关系？"><a href="#res目录下各文件夹与R-java中的类与成员变量之间有什么关系？" class="headerlink" title="res目录下各文件夹与R.java中的类与成员变量之间有什么关系？"></a>res目录下各文件夹与R.java中的类与成员变量之间有什么关系？</h3><p>对于drawable、layout、menu文件夹下的每一个文件都分别会在R.java文件里面生成drawable、layout、menu类的一个常量，类名就是文件夹的名字，常量的名字就是文件名字。</p><p>对于values文件夹下面的文件是根据文件里面的内容来生成相应的类常量，此文件夹下xml文件的根节点是resources，里面的标签名就是类名，属性就是常量名。</p><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230625193619207.png" alt="image-20230625193619207"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/test/">test</category>
      
      <category domain="http://example.com/categories/test/test1/">test1</category>
      
      
      <category domain="http://example.com/tags/test/">test</category>
      
      
      <comments>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2023/06/03/hello-world/</link>
      <guid>http://example.com/2023/06/03/hello-world/</guid>
      <pubDate>Sat, 03 Jun 2023 06:53:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/06/03/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
