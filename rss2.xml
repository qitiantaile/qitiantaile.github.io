<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>七天太乐</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>七天都要快乐 (★≧▽^))★☆</description>
    <pubDate>Fri, 30 Jun 2023 13:36:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>网络安全复习</title>
      <link>http://example.com/2023/06/29/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/</link>
      <guid>http://example.com/2023/06/29/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/</guid>
      <pubDate>Thu, 29 Jun 2023 03:35:50 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;网络安全复习&quot;&gt;&lt;a href=&quot;#网络安全复习&quot; class=&quot;headerlink&quot; title=&quot;网络安全复习&quot;&gt;&lt;/a&gt;网络安全复习&lt;/h1&gt;&lt;p&gt;计算机网络安全，也称&lt;font color=red&gt;“网络安全”，是指计算机网络中的硬件资源和信息资源的安全性，它通过网络信息的产生、存储、传输和使用过程来体现&lt;/font&gt;，包括网络设备的安全性和网络信息的安全性。其是否安全通过&lt;font color=red&gt;可用性、保密性、完整性、不可抵赖性、可控制性来评估&lt;/font&gt;。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="网络安全复习"><a href="#网络安全复习" class="headerlink" title="网络安全复习"></a>网络安全复习</h1><p>计算机网络安全，也称<font color=red>“网络安全”，是指计算机网络中的硬件资源和信息资源的安全性，它通过网络信息的产生、存储、传输和使用过程来体现</font>，包括网络设备的安全性和网络信息的安全性。其是否安全通过<font color=red>可用性、保密性、完整性、不可抵赖性、可控制性来评估</font>。</p><span id="more"></span><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><h3 id="a-计算机网络结构和组成，典型的网络体系结构；网络协议及封装协议；IPv4地址及端口"><a href="#a-计算机网络结构和组成，典型的网络体系结构；网络协议及封装协议；IPv4地址及端口" class="headerlink" title="a) 计算机网络结构和组成，典型的网络体系结构；网络协议及封装协议；IPv4地址及端口"></a>a) 计算机网络结构和组成，典型的网络体系结构；网络协议及封装协议；IPv4地址及端口</h3><h4 id="计算机网络结构和组成："><a href="#计算机网络结构和组成：" class="headerlink" title="计算机网络结构和组成："></a><font color=pink><strong>计算机网络结构和组成</strong></font>：</h4><p>主机：连接在网络上的计算机和非计算机设备</p><p>计算机网络：简单定义为有通信信道连接的主机和网络设备的集合，方便用户共享资源和通信；<br>通用定义为凡将地理位置不同的、并具有独立功能的多个计算机系统通过通信线路和设备连接起来、以功能完善的网络软件实现网络中资源共享的系统。</p><p>计算机传输文件的必须工作：</p><ul><li><font color=red>计算机之间存在一条传输数据的通路</font></li><li>发起通信的计算机必须将数据通信的通路激活，即发出指令保证数据可以在通路上正确发送和接受。</li><li>告诉网络如何识别和接收数据。</li><li>发起通信方必须确认对方计算机是否准备好接收数据</li><li>发起通信方必须确认对方计算机的问题管理系统是否做好接受文件的准备</li><li>两台计算机文件格式不兼容，至少一台计算机应该完成格式转换</li><li>可靠的措施避免差错和意外，保证对方收到正确的文件</li></ul><p><font color=red>计算机网络系统是非常复杂的系统，计算机之间相互通信设计许多复杂的技术问题，相互通信的两台计算机必须高度协调和协调的工作</font>。</p><p><font color=pink><strong>典型的网络结构</strong></font>：</p><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230629155033665.png" alt="image-20230629155033665"></p><p>OSI体系结构：</p><table><thead><tr><th align="center"></th><th align="center">OSI参考模型</th><th align="center">各层解释</th><th align="center">详细解释</th></tr></thead><tbody><tr><td align="center"></td><td align="center">应用层</td><td align="center">为应用程序提供服务</td><td align="center">对用户不透明的各种服务，例如域名系统DNS，支持万维网应用的HTTP协议，电子邮件系统采用的SMTP协议等</td></tr><tr><td align="center"></td><td align="center">表示层</td><td align="center">数据格式化、数据加密</td><td align="center">主要实现数据转换，(格式。压缩、加密等)，提供标准的应用接口，公用的通信服务、公共数据表示方法</td></tr><tr><td align="center"></td><td align="center">会话层</td><td align="center">建立、管理和维护会话</td><td align="center">主要负责进程之间的建立、管理和终止会话的方法，处理同步与恢复问题</td></tr><tr><td align="center"></td><td align="center">传输层</td><td align="center">建立、管理和维护端到端的连接</td><td align="center">提供端到端间可靠的、透明的数据传输，保证报文顺序的正确性和数据的完整性，如TCP、UDP</td></tr><tr><td align="center">通</td><td align="center">网络层</td><td align="center">IP选址及路由选择</td><td align="center">在源节点和目的节点之间进行路由选择。拥塞控制、顺序控制，传送包(分组)，保证报文的正确性</td></tr><tr><td align="center">信</td><td align="center">数据链路层</td><td align="center">提供介质访问和链路管理</td><td align="center">把不可靠的信道变为可靠的信道，在链路上无差错地传送帧</td></tr><tr><td align="center">子网</td><td align="center">物理层</td><td align="center">物理层</td><td align="center">在链路上透明地传输位。设计线路配置、确定数据传输模式、信号形式、编码及连接传输介质</td></tr></tbody></table><p>TCP&#x2F;IP体系结构：</p><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230629154733050.png" alt="image-20230629154733050"></p><ul><li>TCP&#x2F;IP是一个四层体系结构</li><li>网际层是为了解决不同网络互联的问题</li><li>网络接口层没有具体内容</li></ul><h4 id="网络协议及封装协议"><a href="#网络协议及封装协议" class="headerlink" title="网络协议及封装协议:"></a><font color=pink><strong>网络协议及封装协议</strong></font>:</h4><p>一个网络协议主要由一下三个要素组成：</p><ul><li><font color=red>语法：即数据与协议控制信息的结构或格式</font>。其中协议控制信息俗称首部，是控制协议操作的信息。</li><li></li></ul><p>数据封装：</p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/20181203163131336.png" alt="img" style="zoom:80%;" /><p>计算机网络中，每层都有各自的<font color=red>传送数据单位</font>，这个数据单位因为是协议之间交换的，故称协议数据单元</p><table><thead><tr><th align="center">层</th><th align="center">协议数据单元</th></tr></thead><tbody><tr><td align="center">应用层</td><td align="center">用户数据、用户信息</td></tr><tr><td align="center">传输层</td><td align="center">数据段(报文)</td></tr><tr><td align="center">网络层</td><td align="center">分组或包</td></tr><tr><td align="center">数据链路层</td><td align="center">帧</td></tr><tr><td align="center">物理层</td><td align="center">位</td></tr></tbody></table><p>分组交换技术：</p><ul><li>工作原理：<font color=red>在发送端先把较长的报文划分成较短的、固定长度的数据段</font>。数据段前<font color=red>添加首部</font>构成分组。</li></ul><h4 id="IPV4地址："><a href="#IPV4地址：" class="headerlink" title="IPV4地址："></a><font color=pink><strong>IPV4地址</strong></font>：</h4><ul><li><p>概览</p><ul><li>Internet上的主机至少拥有一个地址。</li><li>任何两台主机的IP地址不能相同，但是允许一台主机拥有多个IP地址。</li><li>IP地址的划分经过三个阶段：分类的IP地址、子网的划分和无分类编址。</li></ul></li><li><p>分类IP地址结构及类别</p><ul><li>IP地址由32位二进制数，即4个字节，与硬件没有关系，也称逻辑地址</li><li>IP地址由网络号和主机号两个字段组成，也叫两级IP地址结构</li><li><font color=red>先按IP地址中的网络号找到网络，再按主机号找到主机</font></li><li>IP地址不只是计算机代号，同时指出计算机所属网络</li><li><font color=red>IP地址划分为5类，即A类到E类</font></li><li>保留地址：特殊的地址格式</li><li>网络地址：<font color=red>主机号全0</font>，用来指明单个网络的地址，它不会出现在目的地址中<ul><li>10.0.0.0（A类）</li><li>175.89.0.0（B类）</li><li>201.123.45.0（C类）</li></ul></li><li>直接广播地址：<font color=red>主机号全1，网络号不为0</font>，表示一个物理网络上的所有主机。<ul><li>此时包的一次发送将到达一个特定网络上所有的计算机</li></ul></li><li>有线广播地址：<font color=red>IP地址的32位都为1时为有限广播地址</font>。<font color=red>它不会出现在源地址中</font>。<ul><li>有线广播指一个本地物理网的一次广播</li></ul></li><li>本机地址：<font color=red>IP地址的32位全为0</font>。不会出现在目的地址中。</li></ul></li><li><p>子网和子网掩码：</p><ul><li>两级IP地址缺点：<ul><li>地址空间利用率低</li><li>每个物理网络分配一个网络号会使路由表过大，降低网络性能</li></ul></li><li><font color=red>在IP地址中增加一个subnet-id字段，使两级IP地址结构变为三级的IP地址结构，也叫划分子网</font>。<ul><li>子网号subnet-id是从主机号中“借用”的若干位</li><li>每个子网都有自己的网络地址</li></ul></li><li>IP地址和物理地址：<ul><li>在IP数据报的首部既有源地址IP地址也有目的IP地址</li><li>在通信中路由器只根据目的的IP地址进行路由选择</li><li>一个路由器至少有两个IP地址和两个MAC地址</li><li>路由器的MAC地址不会出现在IP数据报中</li><li>物理网络的数据链路层看到的只是MAC帧</li><li>IP数据报被封装在MAC帧中</li><li>不同网络MAC首部会变化</li></ul></li></ul></li></ul><h4 id="端口："><a href="#端口：" class="headerlink" title="端口："></a><font color=pink><strong>端口</strong></font>：</h4><ul><li><p>端口是传输层的概念。端口号是按照应用进程的功能对应用进程实行的标识，长16位</p><ul><li>端口号分两类：<ul><li>熟知端口号：数值一般在0~1023.当一个新的应用服务程序出现，必须为它指派一个熟知端口；<ul><li>如HTTP协议对应端口号80，SMTP对应25，FTP对应21</li></ul></li><li>一般端口：用来随时分配给请求应用服务的客户进程。</li></ul></li></ul></li><li><p>每台主机对端口号独立编号，所以端口号只有本地意义</p></li><li><p>通信过程中，采用端口号和IP地址绑定使用。<font color=red>端口号和IP地址绑定后形成的标识称为插口(Socket)</font>，表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket = (IP Address: Port Number)</span><br></pre></td></tr></table></figure></li><li><p>TCP是面向连接的传输层协议，其连接是一对端点的连接，插口标识出连接的源地址和目的地址，eg：一个TCP连接表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TCP Connection::= (Socket1,Socket2) = ((IP1:Port1),(IP2:Port2))</span><br><span class="line">其中IP1表示源主机IP地址，Port1表示该主机上的一个应用进程；</span><br><span class="line">IP2表示目的主机的IP地址，Port2表示目的主机上的一个应用进程；</span><br></pre></td></tr></table></figure></li></ul><p>b) 信息安全定义，主要安全特性</p><h4 id="信息安全："><a href="#信息安全：" class="headerlink" title="信息安全："></a><font color=pink><strong>信息安全</strong></font>：</h4><ul><li><font color=red>信息安全</font>是指信息系统中的信息不会因为偶然的，或者恶意的原因而遭受<font color=red>破坏。更改和泄露</font>，信息系统能够持续、不间断地提供信息服务。</li></ul><h3 id="c-网络安全模型，计算机网络的脆弱性"><a href="#c-网络安全模型，计算机网络的脆弱性" class="headerlink" title="c) 网络安全模型，计算机网络的脆弱性"></a>c) 网络安全模型，计算机网络的脆弱性</h3><h4 id="计算机网络的脆弱性："><a href="#计算机网络的脆弱性：" class="headerlink" title="计算机网络的脆弱性："></a><font color=pink><strong>计算机网络的脆弱性</strong></font>：</h4><ul><li><p><font color=red>分组交换容易受到攻击</font>：</p></li><li><p>所有用户共享资源，给予一个用户服务会影响其他用户</p></li><li><p>攻击数据包在被判断为是否恶意之前都会被转发给受害者</p></li><li><p>路由分散决策，流量无序等</p></li><li><p><font color=red>缺乏认证与可追踪性</font>：</p></li><li><p>因特网无认证机制，任何一个终端接入即可访问全网，导致IP欺骗</p></li><li><p>攻击者伪造数据包中的任何区域的内容然后发送数据包到Internet中。 <font color=red>通常情况下，路由器不具备数据追踪功能，因此很难去验证一个数据包是否来自其所声称的地方</font>。</p></li><li><p>通过IP欺骗隐藏来源，攻击者无须担心对此造成的损失负责。</p></li><li><p><font color=red>尽力而为的服务策略</font>：</p></li><li><p>只要是提交到网络的数据，不管是正常的还是攻击流量，网络都会尽可能将其送到目的地。</p></li><li><p><font color=red>匿名与隐私</font>：</p></li><li><p>网络身份是虚拟的，普通用户无法知道对方的真实身份。</p></li><li><p><font color=red>对全球网络基础设施的依赖</font></p></li><li><p><font color=red>无尺度网络</font>：</p></li><li><p><font color=red>无尺度网络的典型特征是网络中的大部分节点只和很少节点连接，而有极少数节点与非常多的节点连接</font>。这些节点称为枢纽，其存在使得无尺度网络对意外故障有强大承受能力（删除大部分节点不会引发网络分裂），但面对针对枢纽节点的协同性攻击时显得十分脆弱。</p></li><li><p><font color=red>互联网的级联特性</font>：</p></li><li><p>当网络中的一条通信线路发生变化时，附近的路由器会通过“ <font color=red>边界网关协议(BGP)</font>”向其临近路由器发出通知。</p></li><li><p>“ <font color=red>网络数字大炮</font>”就是针对互联网的这种级联结构发起的一种拒绝服务攻击武器。利用伪造的BGP协议消息攻击路由器，导致网络中几 乎所有路由器都被占用，正常的路由中断无法得到修复</p></li><li><p><font color=red>中间盒子带来新的安全风险</font>：</p><ul><li>用于协议转换的NAT、改善性能的DNS缓存、用于安全防护的防火墙等不同类型的安全盒子被大量插入互联网中。</li><li>在网络中引入了单一故障点和新的网络攻击点，削弱了网络的健壮性和安全性。</li></ul></li></ul><h4 id="网络安全模型"><a href="#网络安全模型" class="headerlink" title="网络安全模型"></a><font color=pink><strong>网络安全模型</strong></font></h4><ul><li><font color=red>网络安全</font>是指网络环境下的信息系统中分布在主机、链路和转发节点中的信息不受威胁，没有危险、危害和损失。</li><li>引发网络安全问题的技术原因：<ul><li>通信协议的缺陷：<font color=deepskyblue>如SYN泛洪攻击、源IP导致欺骗攻击、地址接卸协议(ARP)欺骗攻击</font></li><li><font color=deepskyblue>系统漏洞</font></li></ul></li><li>网路安全内涵：<ul><li>基础理论</li><li>网络安全协议</li><li>网络安全技术</li><li>主机安全技术</li><li>安全标准</li></ul></li><li>安全模型：<font color=red>安全模型以建模的方式给出解决安全问题的方法和过程</font><ul><li>作用：<ul><li><font color=red>安全模型以建模的方式给出解决安全问题的方法和过程</font></li><li>描述构成安全保障机制的要素及要素之间的关系。</li><li>描述信息系统的行为</li><li>描述信息系统的运行过程</li><li>描述信息系统行为与安全保障机制之间的相互关系</li></ul></li><li><font color=pink>P2DR安全模型</font>：<ul><li>组成：<ul><li>策略</li><li>防护</li><li>检测</li><li>响应</li></ul></li><li>优点：<ul><li>描述了策略、防护、检测和响应之间的相互关系</li><li>表明保障安全过程是一个不断调整防护措施、实时检测攻击行为并及时做出响应的动态过程。</li><li>表明需要提供相关的安全技术</li><li>给出了详细的安全信息系统的设计、实施过程</li></ul></li><li>缺点：<ul><li>没有清楚描述网络环境下信息系统的组成、结构和行为。</li><li>也没有描述出信息系统和安全保障机制之间的相互关系。</li><li>没有突出人员的因素和安全信息系统的运行过程</li></ul></li></ul></li><li><font color=pink>IATF安全模型</font>：</li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230629214113649.png" alt="image-20230629214113649" style="zoom:67%;" />+ 人员：核心+ 技术：基础+ 运行：实现过程</li><li>P2DR与IATF区别：<ul><li>IATF突出了人员的因素，表明了人员在设计、实施、维护、管理和运行过程中的重要作用</li><li>IATF该出了网络环境下信息系统的组成，根据功能将其分为四部分</li><li>IATF针对每一部分提出响应的安全技术</li><li>IATF采用纵深防御战略。</li><li>IATF强调运行中安全功能的实现过程</li><li>IATF强调基于信息系统安全寿命保障安全目标</li></ul></li></ul></li></ul><h2 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h2><h3 id="a-主要的定义及分类"><a href="#a-主要的定义及分类" class="headerlink" title="a) 主要的定义及分类"></a>a) 主要的定义及分类</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color=pink><strong>定义</strong></font></h4><ul><li><font color=red>网络安全威胁</font>指网络环境下的i西南西系统中分布在主机、链路和转发节点中的信息受到威胁，存在危险，遭受损失，信息系统<font color=red>无法持续正常提供服务</font>。</li><li><font color=red>网络攻击</font>是指利用网络存在的漏洞和安全缺陷对网络中的硬件、软件及信息进行的攻击，其目的时<strong>破坏网路中信息的保密性、完整性、可用性、可控制性和不可抵赖性等安全特性，削弱、甚至瘫痪网络服务功能</strong>。</li></ul><p><font color=pink><strong>分类</strong></font></p><ul><li>可分为<font color=red>主动攻击</font>和<font color=red>被动攻击</font><ul><li>被动攻击由于对网络和主机都是透明的，因此难以检测，指<font color=red>不会</font>对网络传输的信息、网络状态和网络信息流模式产生影响的攻击行为。<font color=red>被动攻击一般只破坏信息的保密性</font>。<ul><li>嗅探攻击（主体）</li><li>非法访问</li><li>数据流分析</li></ul></li><li>主动攻击是指会改变网络中的信息、状态和信息流模式的攻击行为，破坏信息的保密性、完整性和可用性。<ul><li><font color=red>篡改攻击</font></li><li><font color=red>欺骗攻击</font><ul><li>路由欺骗攻击时用伪造的路由项来该改变路由器中路由表的内容</li></ul></li><li><font color=red>拒绝服务攻击</font></li><li><font color=red>重放攻击</font></li></ul></li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230629215541768.png" alt="image-20230629215541768" style="zoom: 67%;" /></li></ul></li></ul><h3 id="b-嗅探攻击，定义及原理"><a href="#b-嗅探攻击，定义及原理" class="headerlink" title="b) 嗅探攻击，定义及原理"></a>b) 嗅探攻击，定义及原理</h3><h4 id="嗅探攻击"><a href="#嗅探攻击" class="headerlink" title="嗅探攻击"></a><font color=pink><strong>嗅探攻击</strong></font></h4><ul><li><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ul><li>终端A向终端B传输信息，信息<font color=red>还沿着终端A至黑客终端的传输路径传输</font></li><li>A—-&gt;黑客的传输路径对A和B都是透明的。</li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230629220253194.png" alt="image-20230629220253194" style="zoom:50%;" /></li></ul></li><li><h5 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h5><ul><li>破坏信息的保密性</li><li>嗅探攻击是实现数据流分析攻击的前提</li><li>实施重放攻击</li></ul></li><li><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><ul><li><p>集线器是广播设备</p><ul><li>集线器接受MAC帧，通过过除接受端口以外的所有其他端口输出该MAC帧</li><li>若有黑客接入集线器，则A发给B的MAC帧同样发给了黑客终端。</li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230629223052298.png" alt="image-20230629223052298" style="zoom:67%;" /></li></ul></li><li><h5 id="交换机（注意和集线器的图示区别）"><a href="#交换机（注意和集线器的图示区别）" class="headerlink" title="交换机（注意和集线器的图示区别）"></a>交换机（注意和集线器的图示区别）</h5><ul><li><p>转发表中存在终端B对应的转发项，该转发项表明MAC地址为MAC B的终端连接在端口2上</p></li><li><p>A发送的源MAC地址为MAC A，目的MAC地址为MAC B的MAC帧到达交换机时，交换机只从端口2输出MAC帧</p></li><li><p>即使黑客终端与B连在同一个交换机，也无法接受MAC帧</p></li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230629223355087.png" alt="image-20230629223355087" style="zoom:67%;" /></li><li><p>如果转发表中没有MAC地址为MAC B的转发项，<u>交换机完成的MAC帧A到B的传输过程与集线器完成的过程是一样的</u>。</p></li><li><p>交换机转发表建立MAC地址为MAC B的转发项的前提：</p><ul><li>终端B项交换机发送源MAC地址为MAC B的MAC帧</li><li>交换机的转发表中存在没有使用的存储空间</li></ul></li><li><p><font color=pink>MAC表(转发表)溢出攻击</font>是指通过<font color=red>耗尽交换机转发表的存储空间</font>，使得交换机无法根据接收到的MAC帧的转发表中添加转发项的攻击行为</p><ul><li>黑客终端不断发送源MAC地址变化的MAC帧，如发送一系列源MAC地址分别为MAC1、MAC2…的MAC帧使得交换机转发表中添加MAC地址分别为MAC 1、MAC 2…的转发项，<font color=red>这些转发项耗尽交换机转发表的存储空间</font></li><li>当交换机接受到终端B发送的源MAC地址为MAC B的MAC帧时，由于转发表的存储空间已经耗尽，因此无法添加新的MAC地址为MAC B的转发项</li><li><font color=red>导致交换机以广播方式完成MAC帧终端A至终端B传输过程</font></li></ul></li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230629224557400.png" alt="image-20230629224557400" style="zoom:80%;" /><ul><li>实现过程如下：该以太网结构式交换机以太网，因此，只有在各台交换机以广播的形式转发各个终端之间传输的MAC帧时，黑客终端才能嗅探到以太网中各个终端之间的传输的MAC帧。<font color=red>黑客终端需要实施MAC表溢出攻击，持续发送以随机产生的单播MAC地址为源MAC地址、广播MAC地址为目的MAC地址的MAC帧</font>。导致交换机S1、S2、S3中的MAC表溢出，交换机S1、S2、S3以广播形式转发各个终端的MAC帧。</li></ul></li><li><h5 id="嗅探攻击防御："><a href="#嗅探攻击防御：" class="headerlink" title="嗅探攻击防御："></a>嗅探攻击防御：</h5><ul><li>对于集线器：<font color=red>需要防止黑客终端接入集线器</font></li><li>交换机：<ul><li>需要防止黑客终端接入交换机</li><li><font color=red>交换机需要有防御MAC表溢出攻击的机制</font></li></ul></li><li><font color=red>无线通信过程，嗅探攻击是无法避免的，此时需要对信息进行加密</font></li></ul></li></ul></li></ul></li></ul><h3 id="c-拒绝服务攻击原理-x2F-防御机制"><a href="#c-拒绝服务攻击原理-x2F-防御机制" class="headerlink" title="c) 拒绝服务攻击原理&#x2F;防御机制"></a><strong>c)</strong> <font color=red>拒绝服务攻击原理&#x2F;防御机制</font></h3><h4 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a><font color=pink><strong>拒绝服务攻击</strong></font></h4><ul><li>概念：攻击者通过某种手段，有意的造成计算机或网络不能正常运转从而不能像合法用户提供所需服务或者使服务质量降低<ul><li>服务：系统提供，用户使用受益</li><li><font color=red>拒绝服务</font>：任何对服务的干涉如果使得器可用性降低或失去可用性成为拒绝服务，如：带宽耗尽</li><li>攻击方式：消耗系统或网络资源；阻断访问路径；更改系统配置</li><li>攻击目标：主要以网站、路由器、域名服务器等网络基础设施</li></ul></li><li>分类：<ul><li>按攻击方式：<ul><li>资源破坏型Dos：耗尽资源</li><li>物理破坏型Dos：摧毁主机或网络节点</li><li>服务终止型Dos：攻击导致服务崩溃</li></ul></li><li>按攻击是否针对受害者：<ul><li>直接型Dos：</li><li>间接型Dos：</li></ul></li><li>按攻击机制：<ul><li>剧毒包型攻击：利用协议或软件漏洞发送异常数据包导致系统崩溃，对攻击者计算能力和网络带宽没有要求</li><li>风暴型拒绝服务攻击：发送大量数据包导致系统崩溃，“带宽攻击”</li><li>重定向攻击：修改网络参数攻击，<ul><li>重定向目标是攻击者主机，“中间人攻击”</li><li>目标是不存在的主机，拒绝服务攻击</li></ul></li></ul></li><li>属性分类法<ul><li>攻击静态属性</li><li>攻击动态属性</li><li>攻击交互属性</li></ul></li></ul></li><li>Dos攻击原理：<ul><li>剧毒包Dos：也叫漏洞攻击或协议攻击<ul><li>WinNuke攻击</li><li>泪滴攻击</li><li>循环攻击</li></ul></li></ul></li></ul><h3 id="d-截获攻击，Mac地址欺骗攻击；Arp欺骗攻击"><a href="#d-截获攻击，Mac地址欺骗攻击；Arp欺骗攻击" class="headerlink" title="d) 截获攻击，Mac地址欺骗攻击；Arp欺骗攻击"></a>d) 截获攻击，Mac地址欺骗攻击；Arp欺骗攻击</h3><h4 id="截获攻击"><a href="#截获攻击" class="headerlink" title="截获攻击"></a><font color=pink><strong>截获攻击</strong></font></h4><ul><li>攻击原理：<font color=red>截获攻击需要改变信息传输路径</font>，使得信息传输路径经过黑客终端，黑客终端截获信息后，可以继续转发该信息、转发篡改后的信息、重复多次转发该信息。<font color=red>截获攻击是主动攻击</font>。<ul><li>黑客首先需要改变终端A至终端B的传输路径，将终端A至终端B的传输路径变为终端A—–&gt;黑客终端——&gt;终端B，使得终端A传输给终端B的信息必须经过黑客终端</li><li>黑客终端截获A传出给B的信息，可进行如下操作：<ul><li>篡改信息后发给B</li><li>保持信息一段时间后再发给B或反复多次转发同一信息给B</li><li>保持信息，不转发给B</li></ul></li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630170712913.png" alt="image-20230630170712913" style="zoom:67%;" /></li></ul></li><li>攻击后果：<ul><li><font color=red>获得用户的私密信息</font>：如获取Telnet访问服务器使用的用户名和口令</li><li><font color=red>篡改信息</font></li><li><font color=red>实施重放攻击</font>：即使用户采用密文方式传输信息，黑客终端截获某个IP分组后，可以实施重放攻击<ul><li>如用户通过Web服务器进行网上购物，黑客截获IP分组，根据分组所属TCP连接和连接另一端的服务器类型，确定用于电子购物的IP分组；</li><li><font color=red>黑客终端可以不立即转发该IP分组，而是在一段时间后再转发，造成服务器的信息错误</font></li></ul></li></ul></li></ul><h4 id="MAC地址欺骗攻击"><a href="#MAC地址欺骗攻击" class="headerlink" title="MAC地址欺骗攻击"></a><font color=pink><strong>MAC地址欺骗攻击</strong></font></h4><ul><li><p>MAC帧的正常转发过程：</p><ul><li><p>当交换机在转发表中为连接在以太网的每一个终端建立转发项后，能够以单播的方式实现以太网中任何两个终端之间的MAC帧传输过程。</p></li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630172102348.png" alt="image-20230630172102348" style="zoom:67%;" /><ul><li><p>eg：终端C至终端A的MAC帧传输路径为：</p><p>终端C—-&gt;S3.端口1—-&gt;S3.端口2—-&gt;S2.端口2—-&gt;S2.端口1—-&gt;S1.端口3—-&gt;S1.端口1—-&gt;端口A</p></li></ul></li><li><p>交换机S2通过转发表中MAC地址为MAC A的转发项&lt;MAC A，1&gt;确定S2.端口2到S2.端口1的交换过程</p></li><li><p>交换机S1通过转发表中MAC地址为MAC A的转发项&lt;MAC A，1&gt;确定S1.端口3到S1.端口1的交换过程</p></li></ul></li><li><p>MAC地址欺骗攻击流程：</p><ul><li><p>接入以太网，<font color=red>黑客终端通过连接到交换机S3的端口3</font>接入以太网</p></li><li><p><font color=red>将自己的MAC地址修改为终端A的MAC地址MAC A</font></p></li><li><p>发送以MAC A为源MAC地址、以广播地址为目的地址的MAC帧</p></li><li><p>黑客完成上述操作，以太网中各个交换机的转发表如图，</p></li><li><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630172102348.png" alt="image-20230630172102348" style="zoom: 67%;" /><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20230630173332559.png" alt="image-20230630173332559" style="zoom: 67%;" /></p><p>​                                   <strong>黑客操作前</strong>                                                                               <strong>黑客操作后</strong></p></li><li><p>转发表中MAC地址为MAC A的转发项将通过黑客终端的交换路径作为目的MAC地址为MAC A的MAC帧的传输路径</p><ul><li><p>如果此时终端B向终端A发送MAC帧，该MAC帧传输路径如下：</p><p>终端B—-&gt;S1.端口2—-&gt;S1.端口3—-&gt;S2.端口1—-&gt;S2.端口2—-&gt;S3.端口2—-&gt;S3.端口3—-&gt;黑客终端</p></li></ul></li></ul></li><li><p>防御机制：</p><ul><li>阻止黑客终端接入以太网</li><li>阻止黑客终端发送的伪造的MAC地址为源MAC地址的MAC帧进入以太网</li></ul></li></ul><h4 id="DHCP欺骗攻击"><a href="#DHCP欺骗攻击" class="headerlink" title="DHCP欺骗攻击"></a><font color=pink><strong>DHCP欺骗攻击</strong></font></h4><ul><li>攻击原理：<ul><li>终端访问网络前需要配置网络信息，如IP地址。子网掩码。默认网关地址和地域服务器地址</li><li>网络信息可以手动配置，也可以通过DHCP自动从服务器获取</li><li><font color=red>终端网络信息（包括电脑、手机）一般都是自动获取</font>：当网络中存在多个DHCP服务器时，终端随机选择一个能够提供DHCP服务的服务器为其提供网络信息，为攻击提供可能</li><li>黑客可以<font color=red>伪造一个DHCP服务器</font>，并将其接入网络</li><li><font color=red>伪造的DHCP服务器中将黑客终端的IP地址作为默认网关地址</font></li><li>当终端从伪造的DHCP服务器获取错误的默认网关地址后，所有发送给其他网络的IP分组将首先发送给黑客终端</li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630195815459.png" alt="image-20230630195815459" style="zoom:67%;" /></li></ul></li><li>攻击过程：<ul><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630195949897.png" alt="image-20230630195949897" style="zoom: 80%;" /></li><li>正常DHCP服务器网络设置在<font color=red>局域网LAN 2</font>内，DHCP服务器的IP地址为192.2.2.5，<font color=red>路由器R</font>通过配置中继地址192.2.2.5，将其他局域网内终端发送的DHCP发现和请求消息转发给DHCP服务器</li><li>如果黑客终端想要截获所有<font color=red>LAN 1</font>内终端发送给其他局域网的IP分组，可以在LAN 1内连接一个伪造的DHCP服务器，伪造的DHCP服务器配置的子网掩码和可分配的IP地址范围与正常DHCP服务器为LAN 1配置的参数基本相同</li><li>但是将默认网关地址设置为黑客终端地址，如图示的192.1.1.253；如果LAN 1内终端通过伪造的DHCP服务器获得网络信息，其中的网络默认网关地址时黑客终端地址，从而使得LAN 1内终端将发送给其他局域网的IP分组先传输给黑客终端，黑客终端复制IP分组，再将分组转发给真正的默认网关，如图的192.1.1.254，以此使得LAN 1内终端感觉不到发送给其他局域网的IP分组已经被黑客终端截获</li><li>LAN 1内终端发现DHCP服务器过程中，往往选择先向其发送的DHCP服务器作为其配置网络信息的DHCP服务器。由于伪造的DHCP服务器位于LAN 1内，因此，LAN 1内终端一般情况会先收到伪造的DHCP服务器提供的信息，选择伪造的DHCP服务器</li></ul></li><li>防御机制：<ul><li><font color=red>关键时不允许伪造的DHCP服务器接入局域网</font></li></ul></li></ul><h4 id="ARP欺骗攻击"><a href="#ARP欺骗攻击" class="headerlink" title="ARP欺骗攻击"></a><font color=pink><strong>ARP欺骗攻击</strong></font></h4><ul><li><p>ARP(地址解析协议)：已知一个机器的IP地址，找出其对应的硬件地址</p><ul><li>作用：从网络使用的IP地址解析出数据链路层使用的硬件地址</li><li><font color=red>每一个终端都有ARP缓冲区</font>，一旦完成地址解析过程，ARP缓冲区中建立IP地址与MAC地址的绑定项。如果已经存在，租用绑定项中的结果作为解析结果，不在进行地址解析过程</li><li>如果终端A已经获取终端B的IP电子地址IP B，需要解析出终端B的MAC地址，A会广播如图的ARP请求报文。请求报文给出终端A的IP地址IP A与终端A的MAC地址MAC A的绑定项，同时给出终端B的IP地址IP B。</li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630202454477.png" alt="image-20230630202454477" style="zoom:80%;" /></li><li>该广播报文被以太网中的所有终端接收，所有终端的ARP缓冲区中记录下终端A的IP地址IP A和MAC地址MAC A的绑定项，只有终端B向终端A发送ARP响应报文，其中给给出终端B的IP地址IP B与MAC地址MAC B的绑定项。</li><li>终端A将绑定项记录在ARP缓冲区中。当以太网中的终端需要向终端A发送MAC帧时，可通过ARP缓冲区IP A与MAC A的绑定项直接获得终端A的MAC地址。</li></ul></li><li><p>攻击原理：</p><ul><li><p><font color=red>由于以太网中终端无法鉴别ARP请求报文中给出的IP地址与MAC地址绑定的真伪</font>。只是将绑定项记录在ARP缓冲区</p></li><li><p>如果终端A想要截获其他终端发送给终端B的IP分组，在发送的ARP请求报文中给出IP地址IP B和MAC地址MAC A的绑定项</p></li><li><p><font color=red><strong>其他终端在ARP缓冲区中记录IP B与MAC A的绑定项</strong></font></p></li><li><p>如果需要向IP地址为IP B的节点传输IP分组</p></li><li><p>该IP分组被封装称以MAC A为目的MAC地址的MAC帧</p></li><li><p>该MAC帧经过以太网传输最后到达A，而不是B（取决于MAC地址到底是谁）</p></li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630203629361.png" alt="image-20230630203629361" style="zoom:80%;" /></li><li><p>黑客终端分配的IP地址为IP C，网卡的MAC地址为MAC C，而终端A分配的IP地址为IP A，网卡的MAC地址为MAC A。</p></li><li><p>正常情况下，<font color=red>路由器ARP缓冲区中应该将IP A和MAC A绑定在一起</font>，当路由器需要转发目的IP地址为IP A的IP分组时，或者通过ARP地址解析协议过程解析出IP A对应的MAC地址（ARP缓冲区中没有IP A对应的MAC地址），或者直接从ARP缓冲区检索IP A对应的MAC地址时</p></li><li><p>将IP分组封装称以MAR R为源MAC地址。MAC A为目的MAC地址的MAC帧，然后，通过连接路由器和终端的A的以太网将该MAC帧发送给终端A</p></li><li><p>当黑客终端希望通过ARP欺骗来截获发送给终端A的IP分组时，<font color=red>首先广播一个ARP请求报文，并在<u>请求报文中将终端A的IP地址IP A和自己的MAC地址MAC C绑定在一起</u>，路由器接收到该ARP请求报文后，在ARP缓冲区记录IP A和MAC C的绑定项</font></p></li><li><p>当路由器需要转发目的地址为IP A的IP分组时，将该IP分组封装成以MAC R为源MAC地址、MAC C为目的地址的MAC帧，这样连接路由器和终端的以太网将MAC帧传输给黑客终端，而不是终端A；通常黑客在拦截前，会通过攻击瘫痪掉终端A</p></li></ul></li><li><p>防御机制：</p><ul><li>终端没有鉴别ARP请求报文能力，需要<font color=red>以太网交换机提供鉴别ARP请求和响应报文中IP地址与MAC地址绑定项真伪的能力</font>，只需转发正确的IP地址和MAC地址绑定项的ARP请求</li></ul></li></ul><h3 id="e-路由欺骗攻击，原理及过程"><a href="#e-路由欺骗攻击，原理及过程" class="headerlink" title="e)路由欺骗攻击，原理及过程"></a><strong>e)</strong><font color=red>路由欺骗攻击</font>，原理及过程</h3><h4 id="生成树欺骗攻击"><a href="#生成树欺骗攻击" class="headerlink" title="生成树欺骗攻击"></a><font color=pink><strong>生成树欺骗攻击</strong></font></h4><ul><li><p>工作原理：</p><ul><li><p><font color=red>交换机工作原理要求不允许交换机之间出现环路</font></p></li><li><p>协议允许设计一个存在冗余链路的网络，但在网络运行时，通过阻塞某些端口使整个网络没有 环路。</p></li><li><p>交换机标识符：</p><ul><li><table><thead><tr><th align="center">交换机优先级</th><th align="center">交换机MAC地址</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p><font color=red>所有交换机中交换机标识符值最小的交换机为根交换机</font></p></li></ul></li></ul></li><li><p>攻击过程：</p><ul><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630205904037.png" alt="image-20230630205904037" style="zoom: 67%;" /></li></ul></li><li><p>防御：</p><ul><li>不允许黑客终端参与网络生成树建立过程</li></ul></li></ul><h4 id="路由欺骗攻击"><a href="#路由欺骗攻击" class="headerlink" title="路由欺骗攻击"></a><font color=pink><strong>路由欺骗攻击</strong></font></h4><ul><li>攻击原理：<ul><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630210323991.png" alt="image-20230630210323991" style="zoom:67%;" /></li><li>如果黑客终端想要截获路由器R1传输给网络W的IP分组，<font color=red>向路由器R1发送一项伪造的路由项，该伪造的路由项将通往网络W的距离设置为0</font>。路由器R接收到该路由项，选择黑客终端作为下一条，并计算出路由表中目的网络为网络W的路由项</li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630210633392.png" alt="image-20230630210633392" style="zoom:67%;" /></li><li>黑客接收到IP分组后，再将分组发给路由器R2，使得IP分组最终可以到达网络W，以此欺骗路由器R1和该IP分组的发送端</li><li><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230630210955417.png" alt="image-20230630210955417" style="zoom:67%;" /></li><li>路由器R1通过路由协议生成正确的路由表，A发送B的IP分组：<ul><li>A—-&gt;路由器R1—-&gt;R2—-&gt;R3—-&gt;B</li></ul></li><li>如果黑客想要截获LAN 1终端发送给LAN 4的IP分组，连接在LAN 2的黑客终端发送一个黑客终端IP地址为源地址、组播地址为224.0.0.9为目的地址的路由消息，其伪造了一项黑客终端直接和LAN 4连接的路由项。</li><li>与黑客连在同一网络的R1和R2接收路由消息，对R1来说，由于伪造路由项给出的到达LAN 4的距离最短所以路由表发生错误改变，终端A发送的IP分组最后从R1错误的转发给黑客，而不是正确路径的R2</li></ul></li><li>防御机制：<ul><li>路由器接收消息先鉴别发送端，对消息进行检测</li><li>确定路由消息是由认证的相邻路由器发送且未被篡改</li></ul></li></ul><h2 id="IP与路由安全"><a href="#IP与路由安全" class="headerlink" title="IP与路由安全"></a>IP与路由安全</h2><p><strong>a)</strong> <font color=red>IPv4协议</font>,主要的安全问题</p><p><strong>b)</strong><font color=red>IPSec安全策略，运行模式</font></p><p>c) AH协议，定义及结构</p><p>d) ESP协议，定义及结构</p><p>e) 网络密钥交换，定义及结构</p><h2 id="区块链安全"><a href="#区块链安全" class="headerlink" title="区块链安全"></a>区块链安全</h2><p><strong>a)</strong> <font color=red>区块链结构</font>，链式结构、哈希链、区块结构</p><p><strong>b)</strong><font color=red>区块链主要协议</font>，共识协议、地址生成</p><p>c) 节点运行机制，P2P点对点网络</p><h2 id="传输层安全"><a href="#传输层安全" class="headerlink" title="传输层安全"></a>传输层安全</h2><p>a) 传输层协议，UDP协议、TCP协议</p><p><strong>b)</strong> <font color=red>SSL体系结构、协议模式，握手协议</font></p><p>c) TLS结构与协议模式，TLS与SSL差异</p><h2 id="DNS安全"><a href="#DNS安全" class="headerlink" title="DNS安全"></a>DNS安全</h2><p>a) DNS服务，定义及原理</p><p>b) DNS运营机制</p><p><strong>c)</strong> <font color=red>域名系统</font>，主要流转流程</p><p>d) DNS主要安全威胁</p><h2 id="安全多方计算"><a href="#安全多方计算" class="headerlink" title="安全多方计算"></a>安全多方计算</h2><p>a) 主要技术路线分类</p><p>b) 基础秘密分享协议，三元加法分享、三元乘法分享等</p><h2 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h2><p>a) 万维网，主要的体系架构</p><p>b) SQL注入攻击及防范，典型的SQL注入过程</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/">大学</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/">大三下</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/">网络安全</category>
      
      
      <category domain="http://example.com/tags/%E5%A4%8D%E4%B9%A0/">复习</category>
      
      
      <comments>http://example.com/2023/06/29/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博弈论复习</title>
      <link>http://example.com/2023/06/28/%E5%8D%9A%E5%BC%88%E8%AE%BA/</link>
      <guid>http://example.com/2023/06/28/%E5%8D%9A%E5%BC%88%E8%AE%BA/</guid>
      <pubDate>Wed, 28 Jun 2023 12:00:30 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;博弈论&quot;&gt;&lt;a href=&quot;#博弈论&quot; class=&quot;headerlink&quot; title=&quot;博弈论&quot;&gt;&lt;/a&gt;博弈论&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><span id="more"></span><h2 id="完全信息静态博弈"><a href="#完全信息静态博弈" class="headerlink" title="完全信息静态博弈"></a>完全信息静态博弈</h2><ul><li>参与人：博弈中选择行动来最大化效应的决策主体；</li><li>行动：参与人在博弈中的某个时间点的决策变量</li><li>战略：参与人的行动规则，规定了参与人在每一种轮到自己行动的情形下应采取的行动。与行动的顺序相关，是行动的有序集。</li><li>支付&#x2F;效用函数</li></ul><h3 id="战略式博弈"><a href="#战略式博弈" class="headerlink" title="战略式博弈"></a>战略式博弈</h3><p>战略式博弈是一种相互作用的决策模型，这种模型假设<font color=red>每个参与人仅选择一次行动或战略</font>，并且<font color=red>所有参与人的选择是同时进行的</font>。完全信息静态博弈最适合用战略式博弈描述。</p><h3 id="占优战略"><a href="#占优战略" class="headerlink" title="占优战略"></a>占优战略</h3>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/">大学</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/">大三下</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E5%8D%9A%E5%BC%88%E8%AE%BA/">博弈论</category>
      
      
      <category domain="http://example.com/tags/%E5%A4%8D%E4%B9%A0/">复习</category>
      
      
      <comments>http://example.com/2023/06/28/%E5%8D%9A%E5%BC%88%E8%AE%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>复杂性理论测试卷</title>
      <link>http://example.com/2023/06/28/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E6%B5%8B%E8%AF%95%E5%8D%B7/</link>
      <guid>http://example.com/2023/06/28/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E6%B5%8B%E8%AF%95%E5%8D%B7/</guid>
      <pubDate>Wed, 28 Jun 2023 02:02:10 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;复杂性理论测试&quot;&gt;&lt;a href=&quot;#复杂性理论测试&quot; class=&quot;headerlink&quot; title=&quot;复杂性理论测试&quot;&gt;&lt;/a&gt;复杂性理论测试&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="复杂性理论测试"><a href="#复杂性理论测试" class="headerlink" title="复杂性理论测试"></a>复杂性理论测试</h1><span id="more"></span><p>判断题</p><p>2.停机问题是不可判定的，无法用任何算法求解。1</p><p>3.素数问题PRIME是典型的NP问题而非P问题。1</p><p>4.时间复杂度函数n(n-1)&#x2F;2∈Θ(n^3)and∈Ω(n^2).0</p><p>5.超越多项式时间复杂度的精确算法一般是不可接受的。1</p><p>6.递归算法的简洁性可能会掩盖它的低效率。0</p><p>7.只要解决NPC中的任何一个问题，即找到其多项式求解算法， 那么所有的NP问题都能得到解决。1</p><p>8.所有的语言构成的集合不可数，因此语言的个数比TM个数多，因此一定有TM无法识别的语言。1</p><p>9.如果一个算法不能用图灵机来描述，也必定不能在一台物理机上实现；反之如果一个算法能在一台物理机上实现，也必定可以用图灵机来描述。1</p><p>10.任何一个多带TM都等价于某个单带TM。1</p><p>单选题20’</p><p>1.下列不属于NPC问题的是 </p><p>旅行商问题 顶点覆盖问题 <em><strong>*2SAT*</strong></em> 完全子图问题</p><p>2.下列不属于算法特性的是</p><p>正确性 一般性 高效性 <em><strong>*简洁性*</strong></em></p><p>3.如果P≠NP，下列说法不正确的是</p><p><strong>NPC是NP层面比较难的问题</strong>  NPC∈NP</p><p>NP hard问题比NP难     NPC∈NP hard</p><p>4.下列关于算法复杂性理论说法不正确的是</p><p>算法理论其目标是寻找某个问题的最佳算法</p><p>复杂性理论关心求解问题所需资源的下界</p><p>复杂性理论是密码学的基础</p><p><em><strong>*复杂性理论证明某个问题不能有效求解，则该问题没什么意义和价值*</strong></em></p><p>5.下列断言为假的是</p><p>n(n+1)&#x2F;2∈O(n^3） n(n+1)&#x2F;2∈O(n^2）</p><p><em><strong>*n(n+1)&#x2F;2∈Θ*</strong></em><em><strong>*(*</strong></em><em><strong>*n^3*</strong></em><em><strong>*)*</strong></em>  n(n+1)&#x2F;2∈Ω(n)</p><p>\6. 下列关于算法效率分析说法不正确的是</p><p>A、最优效率分析运远不如最差效率分析重要.</p><p>B、平均效率的分析比最差效率和最优效率的分析难很多</p><p>C、<em><strong>*可以用最差效率和最优效率的平均数方法来求平均效率*</strong></em></p><p>D、如展一个算法的最优效率不能满足要求，则可以抛弃</p><p>7.在计算复杂性理论中，将所有在多项式时间内可求解的问题和可验证的问题分别称之为</p><p>NP和NPC问题   <em><strong>*P*</strong></em><em><strong>*问题和N*</strong></em><em><strong>*P*</strong></em><em><strong>*问题*</strong></em></p><p>NP问题和P问题  NPC问题和P问题</p><p>8.下列属于P问题的是</p><p><em><strong>*P*</strong></em><em><strong>*ATH*</strong></em><em><strong>*问题*</strong></em> HAMPATH问题 3-COLOR问题 CLIQUE问题</p><p>9.关于归约的说法不正确的是</p><p>归约的过程只有用多项式时间完成才有意义</p><p>问题A可归约为问题B，说明问题A不比问题B难</p><p>归约之间存在传递性</p><p><em><strong>*S*</strong></em><em><strong>*AT*</strong></em><em><strong>*是N*</strong></em><em><strong>*PC*</strong></em><em><strong>*问题，如果一个问题可以归约到S*</strong></em><em><strong>*AT*</strong></em><em><strong>*，则该问题必定是N*</strong></em><em><strong>*PC*</strong></em></p><p>10.下列说法不正确的是</p><p>图灵是计算机理论之父和人工智能之父</p><p><em><strong>*图灵命题已被证明是定理*</strong></em></p><p>图灵测试奠定了人工智能的基础</p><p>图灵机是冯诺依曼设计的物理机器的基础</p><p>简答题25’</p><p>1.是否可以写出一个程序来判断另一个程序停机？</p><p> 不能，</p><p>2.如何从图灵机角度看待算法的时间复杂度和空间复杂度？</p><p> 步数和方格数</p><p>3.实际应用中如何判定一个问题是NPC问题？第一个NPC问题是怎么发现的？</p><p>是否是NP问题，已知NPC问题是否能归约到它；</p><p>1971年库克教授在论文中提出了第一个NPC问题并给出了证明。这使得世人知道了这类NPC问题是真的存在的。库克教授给出的这第一个NPC问题叫做“SAT问题”，又称作“可满足性问题”，英文为“The Satisfiability Problem”，SAT是Satisfiability单词的前三个字母。“SAT问题是一个NPC问题”这个结论被称作库克定理</p><p>4.算法提升的本质是什么？提升算法效率的方法有哪些？</p><p> 效率；减少数据冗余，优化循环、减少嵌套，避免大量使用递归；</p><p>5.谈谈你对计算复杂性理论的认识，并举一个简单的安全或有关的实例说明。</p><p> 1.算法设计的重要性：计算复杂性理论告诉我们，并非所有的问题都可以通过高效的算法解决。对于某些问题，可能不存在多项式时间内解决它们的算法。因此，在学习算法设计和问题求解时，需要考虑问题的复杂性，并寻找合适的算法来解决。</p><p>2.问题的可证明性：计算复杂性理论研究问题的难解性和可解性，它提供了一种形式化的框架来研究问题是否可以在有效的时间内解决。这启发我们思考问题的本质和边界，以及寻找问题的可证明性和难解性。</p><p>3.理论与实践的结合：计算复杂性理论不仅仅关注问题的理论分析，还与实际问题密切相关。它为算法设计和问题求解提供了基本的指导原则和方法。通过理解计算复杂性理论，我们可以更好地理解和设计高效的算法，提高计算问题的解决效率。</p><p>4.密码学和安全性的研究：计算复杂性理论对密码学和安全性的研究有重要的影响。它提供了分析密码算法安全性的工具和方法，帮助我们设计和评估安全的加密算法</p><p>综合分析题20’</p><p>1.证明定理：如果t1(n)∈O(g1(n))并且t2(n)∈O(g2(n))，则t1(n)+ t2(n)∈O(max{ g1(n), g2(n)})</p><p> 定义法；</p><p>2.写出将十进制正整数转换为二进制的标准算法。</p><p>a.用伪代码描述该算法。</p><p>b.分析算法时间复杂度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">M=[]</span><br><span class="line">c=A</span><br><span class="line"><span class="keyword">while</span>(c!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    b = c%<span class="number">2</span></span><br><span class="line">c = c/<span class="number">2</span></span><br><span class="line">M = append(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.设计一个图灵机M，使之接受语言L&#x3D;{w#w | w∈(0,1)*}，画出L（M）的状态转移图，并用简单实例进行验证。</p><p>​                                 <img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230628103847455.png" alt="image-20230628103847455"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/">大学</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/">大三下</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA/">复杂性理论</category>
      
      
      <category domain="http://example.com/tags/%E5%A4%8D%E4%B9%A0/">复习</category>
      
      
      <comments>http://example.com/2023/06/28/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E6%B5%8B%E8%AF%95%E5%8D%B7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>复杂性理论复习</title>
      <link>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/</link>
      <guid>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/</guid>
      <pubDate>Mon, 26 Jun 2023 06:58:32 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;复杂性理论复习综述&quot;&gt;&lt;a href=&quot;#复杂性理论复习综述&quot; class=&quot;headerlink&quot; title=&quot;复杂性理论复习综述&quot;&gt;&lt;/a&gt;复杂性理论复习综述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;理论计算机的核心目标：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;把计算任务按照其本质难度进行分类&lt;/font&gt;                                                     &lt;img src=&quot;https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230626150513090.png&quot; alt=&quot;image-20230626150513090&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;复习重点：判定问题；图灵机构造和基本思想；什么是P、NP、NPC问题及NP问题之间的规约和常见的NPC问题；SAT、2SAT、3SAT问题；递归算法和非递归算法特点和区别；复杂度分析方法区别；会写素数判定的递归和非递归算法&lt;/font&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="复杂性理论复习综述"><a href="#复杂性理论复习综述" class="headerlink" title="复杂性理论复习综述"></a>复杂性理论复习综述</h1><p><strong>理论计算机的核心目标：</strong></p><p><font color=red>把计算任务按照其本质难度进行分类</font>                                                     <img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230626150513090.png" alt="image-20230626150513090"></p><p><font color=red>复习重点：判定问题；图灵机构造和基本思想；什么是P、NP、NPC问题及NP问题之间的规约和常见的NPC问题；SAT、2SAT、3SAT问题；递归算法和非递归算法特点和区别；复杂度分析方法区别；会写素数判定的递归和非递归算法</font></p><span id="more"></span><h2 id="1-什么是可计算问题？什么是不可计算问题？"><a href="#1-什么是可计算问题？什么是不可计算问题？" class="headerlink" title="1.什么是可计算问题？什么是不可计算问题？"></a>1.什么是可计算问题？什么是不可计算问题？</h2><p><font color=pink>可计算问题</font>当且仅当该问题可以在图灵机上经过有限步骤后可以得到正确的结果。相反地，不能由图灵机解决的问题叫做<font color=pink>不可计算问题</font>。</p><h2 id="2-什么是计算复杂性？计算复杂性理论主要研究什么？"><a href="#2-什么是计算复杂性？计算复杂性理论主要研究什么？" class="headerlink" title="2.什么是计算复杂性？计算复杂性理论主要研究什么？"></a>2.什么是计算复杂性？计算复杂性理论主要研究什么？</h2><p><font color=pink>计算复杂性</font>就是用计算机求解问题的难易程度，使用数学方法对计算中所需的各种资源消耗作定量的分析，并研究各类问题之间在计算复杂程度上的相互关系和性质。                                                                                                                      <font color=pink>主要研究</font>计算问题时所需要的资源，比如时间和空间，以及如何尽可能的节省这些资源。</p><h2 id="3-什么是算法？算法有哪些特点？"><a href="#3-什么是算法？算法有哪些特点？" class="headerlink" title="3.什么是算法？算法有哪些特点？"></a>3.什么是算法？算法有哪些特点？</h2><p><font color=pink>算法</font>是对解决方案的准确而完整的描述。                                                                                                                                          <font color=pink>特点</font>：有穷性，可行性，确定性，输入和输出</p><h2 id="4-描述算法的方法有？"><a href="#4-描述算法的方法有？" class="headerlink" title="4.描述算法的方法有？"></a>4.描述算法的方法有？</h2><p>自然语言、流程图、N-S图、伪代码、程序设计语言</p><h2 id="5-如何分析算法的效率？"><a href="#5-如何分析算法的效率？" class="headerlink" title="5.如何分析算法的效率？"></a><font color=red>5.如何分析算法的效率？</font></h2><p>算法的效率分析指对算法在运行时间和存储空间这两种资源的利用效率进行研究。对于一般算法，关注其输入规模，运行时间的度量单位，增长效率和算法的最优最差平均效率；对于递归算法，则需要关注递归的深度，先对算法建立一个递归关系，设置初始条件，再求解分析。</p><h2 id="6-渐进表达式O-g-n-，Θ-g-n-，Ω-g-n-的定义和表达含义？"><a href="#6-渐进表达式O-g-n-，Θ-g-n-，Ω-g-n-的定义和表达含义？" class="headerlink" title="6.渐进表达式O(g(n))，Θ(g(n))，Ω(g(n))的定义和表达含义？"></a><font color=red>6.渐进表达式O(g(n))，Θ(g(n))，Ω(g(n))的定义和表达含义？</font></h2><p><font color=pink>O(g(n))</font>：如果函数t(n)包含在O(g(n))中，对于所有足够大的n，t(n)的上界由g(n)的常数倍确定，即存在大于0的常数和非负的整数n0使得对于所有的 n≥n0 ，有 cg(n)≥t(n)<br>表达含义：g(n)≥该算法的时间复杂度</p><p><font color=pink>Θ(g(n))</font>：如果函数t包含在Θ(g(n))中，对于所有足够大的n，t(n)的上下界都由g的常数倍确定，即存在大于0的常数c1,c2和非负的整数n0使得所有 n≥n0 ，有 c1g(n)≥t(n)≥c2g(n)<br>表达含义：g(n)&#x3D;该算法的时间复杂度</p><p><font color=pink>Ω(g(n))</font>：<br>表达含义：该算法的时间复杂度≥g(n)</p><h2 id="7-递归和非递归算法时间效率的数学分析方法区别？"><a href="#7-递归和非递归算法时间效率的数学分析方法区别？" class="headerlink" title="7.递归和非递归算法时间效率的数学分析方法区别？"></a><font color=red>7.递归和非递归算法时间效率的数学分析方法区别？</font></h2><p>见5</p><ul><li>思维方式：递归通过将一个复杂问题层层转化为一个与原问题规模更小的同类问题，通过不断缩小问题规模，最终到达基本情况，再将各个小问题的解合起来得到整体解决方案。非递归则是从问题的初始状态逐步迭代到最终解的思维方式。</li><li>实现方式：递归的实现方式是通过函数自身的调用来解决问题。非递归通常使用循环结构，通过迭代更新变量来逐步解决问题。</li><li>空间和时间复杂度：递归在某些情况下会导致大量的函数调用和堆栈空间的使用，可能会占用更多的内存空间，非递归在空间上会更加高效；时间上的效率取决于具体实现的方式和算法。</li></ul><h2 id="8-Fibonacci-numbers-F-N-x3D-F-N-1-F-N-2-的时间复杂度表达式？"><a href="#8-Fibonacci-numbers-F-N-x3D-F-N-1-F-N-2-的时间复杂度表达式？" class="headerlink" title="8.Fibonacci numbers F(N) &#x3D; F(N-1) + F(N-2)的时间复杂度表达式？"></a>8.Fibonacci numbers F(N) &#x3D; F(N-1) + F(N-2)的时间复杂度表达式？</h2><p><font color=pink>递归法</font>：O(2^N)<br><font color=pink>公式计算法</font>：O(1)</p><h2 id="9-经典排序问题的算法时间复杂度下界？"><a href="#9-经典排序问题的算法时间复杂度下界？" class="headerlink" title="9.经典排序问题的算法时间复杂度下界？"></a>9.经典排序问题的算法时间复杂度下界？</h2><table><thead><tr><th align="center">排序方法</th><th align="center">时间复杂度(平均)</th><th align="center">时间复杂度(最坏)</th><th align="center">时间复杂度(最好)</th><th align="center">空间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">插入排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O(n^1.3)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">快速排序</td><td align="center">O(nlogn)</td><td align="center">O(n^2)</td><td align="center">O(nlogn)</td><td align="center">O(logn)</td><td align="center">不稳定</td></tr><tr><td align="center">冒泡排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">基数排序</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">桶排序</td><td align="center">O(n+k)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr></tbody></table><h2 id="10-算法性能提升的本质是什么？提升算法效率的四个层次是什么？"><a href="#10-算法性能提升的本质是什么？提升算法效率的四个层次是什么？" class="headerlink" title="10.算法性能提升的本质是什么？提升算法效率的四个层次是什么？"></a>10.算法性能提升的本质是什么？提升算法效率的四个层次是什么？</h2><p><font color=pink>提升的本质</font>：本质是效率，就是让计算机少做事情。效率&#x3D;产出&#x2F;所做的事，产出难提高，所做事情可以减少<br><font color=pink>四个层次</font>：正确性；易读性；健壮性；时空性。</p><h2 id="11-为什么超越多项式时间复杂度的精确算法一般是不可接受的？"><a href="#11-为什么超越多项式时间复杂度的精确算法一般是不可接受的？" class="headerlink" title="11.为什么超越多项式时间复杂度的精确算法一般是不可接受的？"></a><font color=red>11.为什么超越多项式时间复杂度的精确算法一般是不可接受的？</font></h2><p><font color=pink>时间复杂度并不表示一个程序解决需要多少时间，而是当问题规模扩大后，程序需要的时间随规模的增长有多快。</font><br>一个优化问题如果已经找到了多项式时间算法，称该问题为多项式时间可解问题，并将这类问题的集合记为P，即<font color=pink>多项式时间可解问题</font>为P类问题。<br>一个问题没有找到多项式时间算法，在直觉上他是“难解”的，但又无法证明多项式时间算法的不存在性。一方面证明一个问题不存在多项式时间算法是困难的；另一方面，有越来越多的问题无法给出多项式时间算法。<br><font color=pink>NP-完全性理论的核心思想</font>：如果一个问题是NP类问题，并且存在一个能够在多项式时间内转换为该问题的解的算法，那么该问题就是NP-完全问题。<font color=pink>一个问题是NP-完全问题意味着他是NP类问题中最困难的问题之一</font>。其重要性在于：<font color=red>如果能够证明某个问题是NP-完全问题，那么就可以推导出其他许多问题也是NP-完全问题</font>。</p><h2 id="12-什么是图灵机？什么是图灵测试？什么是图灵命题？"><a href="#12-什么是图灵机？什么是图灵测试？什么是图灵命题？" class="headerlink" title="12.什么是图灵机？什么是图灵测试？什么是图灵命题？"></a><font color=red>12.什么是图灵机？什么是图灵测试？什么是图灵命题？</font></h2><p><font color=pink>图灵机</font>：又称图灵计算机，指一种抽象的计算模型，即将人使用纸笔进行数学运算的过程进行抽象，由一个虚拟机器替代人类进行数学运算。<br>其有一个无限长的纸带，纸带分成一个一个方格，每个方格有不同颜色，一个机器头在纸带上移动。机器头有一组内部状态和一些固定程序。每个时刻，机器头从当前纸带读入一个方格的信息，然后结合内部状态查找程序表，根据程序输出信息到纸带方格中，并转换自己的内部状态，进行移动。</p><p><font color=pink>图灵测试</font>：指测试者和被测试者隔开的情况下，通过一些装置向被测试者随意提问。进行多次测试后，如果机器让平均每个参与者做出了超过30%的误判，那么这台机器就通过了测试，并认为具有人类智能。</p><p><font color=pink>图灵命题</font>：可计算性理论的基本论题，一个函数是可计算的当且仅当可由一部图灵机来计算它。</p><h2 id="13-图灵机的基本原理及组成部分？什么是格局？"><a href="#13-图灵机的基本原理及组成部分？什么是格局？" class="headerlink" title="13.图灵机的基本原理及组成部分？什么是格局？"></a><font color=red>13.图灵机的基本原理及组成部分？什么是格局？</font></h2><p><font color=pink>图灵机基本原理</font>：其有一条无限长的纸带，纸带分成一个一个小方格，每个方格有不同的颜色。一个机器头在纸带上移动。机器头有一组内部状态和一些固定程序。每个时刻，机器头从当前纸带读入一个方格的信息，然后结合内部状态查找程序表，根据程序输出信息到纸带方格中，并转换自己的内部状态，进行移动。<br><font color=pink>组成部分</font>：</p><p>a.纸带，被分成许多个方格，符号可以写入或者读出；</p><p>b.可以移动的读写头，能从纸带读取或写入符号；</p><p>c.指示读写头下一步如何操作的一组规则。</p><p>d.状态寄存器：保存图灵机当前的状态。</p><p><font color=pink>格局</font>：格局是图灵机的一个快照。将图灵机计算过程每一个步骤都找一份快照，通过轨迹将这些快照联系在一起，就可以得到一个数据结构。包括纸带内容，读写头位置和控制机状态。</p><h2 id="14-为什么说所有计算或算法都可以由一台图灵机来执行？"><a href="#14-为什么说所有计算或算法都可以由一台图灵机来执行？" class="headerlink" title="14.为什么说所有计算或算法都可以由一台图灵机来执行？"></a><font color=red>14.为什么说所有计算或算法都可以由一台图灵机来执行？</font></h2><p>邱奇-图灵论题最基本的观点表明，所有计算或算法都可以由一台图灵机来执行。以任何常规编程语言编写的计算机程序都可以翻译成一台图灵机，反之任何一台图灵机也都可以翻译成大部分编程语言的程序，所以该论题和一下说法等价：常规的编程语言可以足够有效地来表达任何算法。该论题被普遍认定为真。</p><h2 id="15-如何从图灵机视角看待算法的时间复杂度和空间复杂度？"><a href="#15-如何从图灵机视角看待算法的时间复杂度和空间复杂度？" class="headerlink" title="15.如何从图灵机视角看待算法的时间复杂度和空间复杂度？"></a><font color=red>15.如何从图灵机视角看待算法的时间复杂度和空间复杂度？</font></h2><p><font color=pink>图灵机程序的复杂度</font>由外部的输入和输出来决定图灵机内部的算法的时间和空间的复杂度。<br><font color=pink>图灵机的时间复杂度T(n)</font>是它处理所有长度为n的输入所需要的最大计算步数。如果对于某个长度为n的输入，图灵机不停机，则T(n)对这个值无定义。<br><font color=pink>图灵机的空间复杂性S(n)</font>是它处理所有长度为n的输入时，在纸带上所使用过的方格总数。如果某个读写头无限的向右移动而不停机，S(n)也无定义。</p><h2 id="16-什么是确定性图灵机、非确定性图灵机和概率图灵机？"><a href="#16-什么是确定性图灵机、非确定性图灵机和概率图灵机？" class="headerlink" title="16.什么是确定性图灵机、非确定性图灵机和概率图灵机？"></a><font color=red>16.什么是确定性图灵机、非确定性图灵机和概率图灵机？</font></h2><p><font color=pink>确定性图灵机(DTM)</font>：在DTM中，其控制规则规定了在任何给定的情况下最多只能执行一个动作。确定性图灵机具有转换功能，对于磁带头下的给定状态和符号，该转换功能指定了三件事：要写入磁带的符号，头部应移动的方向，以及有限控制的后续状态。<br><font color=pink>非确定性图灵机(NDTM)</font>：在理论计算机科学中，非确定性图灵机是一种理论计算模型，其控制规则在某些给定情况下指定了多个可能的动作。NDTM的下一个状态不是完全由其动作和它所看到的当前符号决定的。<br><font color=pink>概率图灵机(PTM)</font>：一种非确定型图灵机，每走一步在两个转移函数之间随机地选取一个。概率图灵机是依照随机带上写下的0和1来决定下一步怎么走。</p><h2 id="17-什么是识别问题？什么是判定问题？什么是PT验证器？"><a href="#17-什么是识别问题？什么是判定问题？什么是PT验证器？" class="headerlink" title="17.什么是识别问题？什么是判定问题？什么是PT验证器？"></a>17.什么是识别问题？<font color=red>什么是判定问题？什么是PT验证器？</font></h2><p><font color=pink>识别问题</font>：当且仅当图灵机接受字符串时，当提供的输入位于语言中时，语言才是可识别的。此外，如果TM终止并拒绝字符串或根本不终止，则可以识别语言。这意味着当提供的输入不在语言中时，TM继续计算。然而，当且仅当由一台机器在提供的输入位于该语言中时接受字符串并在提供的输入不在该语言中时拒绝该字符串，该语言才是可判定的。<br><font color=pink>判定问题</font>：有些语言可被判定器判定。如果存在不可判定语言，那么必然存在不可识别语言。就是无法构造一个图灵机，接受这个语言的每一个字符串。所以如果一个语言不可判定，必然它或者它的补是不可识别的。不可识别的语言是存在的。一个不可判定的语言就是一个不可计算的问题。那是一个超出了计算机能力的问题，一个不能被任何有步骤的、确定性的算法所能解决的问题。<font color=pink>即不用求解，判定是否是解</font>,<font color=red>判定比识别要更加严格</font><br><font color=pink>PT验证器</font>：多项式图灵机</p><h2 id="18-什么是P，NP，NPC，NP-hard？"><a href="#18-什么是P，NP，NPC，NP-hard？" class="headerlink" title="18.什么是P，NP，NPC，NP-hard？"></a><font color=red>18.什么是P，NP，NPC，NP-hard？</font></h2><p><font color=pink>P</font>：一个问题如果在图灵机上所需时间不会超过一个确定的多项式，称此类问题的集合为P，通俗来讲，P问题就是多项式时间可解的问题；<br><font color=pink>NP</font>：可以在非确定型图灵机上在多项式时间内找出解的问题的集合。如果一个问题，可以在多项式时间内验证它的解是否正确，则该问题是一个NP问题。显然 P∈NP(注：到目前为止，P!&#x3D;NP)<br><font color=pink>NPC(NP-Complete)</font>：一个决定性问题C若是NPC，则代表它对NP是完备的，这表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.该问题是一个NP问题</span><br><span class="line">b.所有属于NP的问题都可以归约成该问题</span><br></pre></td></tr></table></figure><p>对于一个NPC问题，我们不可能尝试将所有的NP规约到它，所以通常采用一下方法证明一个问题是NPC问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.证明给定问题的一个解，可以在多项式时间验证该问题</span><br><span class="line">b.可以将一个已知的NPC问题归约到该问题</span><br></pre></td></tr></table></figure><p>在计算复杂度理论中，第一个被证明的NPC问题是布尔可满足性问题。所以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可满足问题属于NPC问题。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可满足性问题(SAT)：</span><br><span class="line">可满足问题是判断仍以给定的一个布尔表达式是否存在一个真赋值，存在则称该布尔表达式可满足</span><br></pre></td></tr></table></figure><p><font color=pink>NP-hard</font>:相较于NPC问题，NP-hard问题只满足条件2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">即所有的NP问题都可以归约到NP-hard问题，即NPC问题可以归约到NP-hard</span><br><span class="line">其次他不一定是NP问题，如下图所示</span><br><span class="line">通常通过将一个已知的NPC问题归约到该问题证明NP-Hard</span><br></pre></td></tr></table></figure><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230626195253002.png" alt="image-20230626195253002" style="zoom:60%;" /><h2 id="19-为什么说计算复杂性理论的首要问题是P-x3D-NP？它的内涵是什么？为什么说P-x3D-NP不可思议？"><a href="#19-为什么说计算复杂性理论的首要问题是P-x3D-NP？它的内涵是什么？为什么说P-x3D-NP不可思议？" class="headerlink" title="19.为什么说计算复杂性理论的首要问题是P&#x3D;NP？它的内涵是什么？为什么说P&#x3D;NP不可思议？"></a><font color=red>19.为什么说计算复杂性理论的首要问题是P&#x3D;NP？它的内涵是什么？为什么说P&#x3D;NP不可思议？</font></h2><p><font color=pink>a</font>.自从P&#x3D;NP问题被正式提出后，有NP完备理论赋予其在实践上的重要性，有证明复杂性理论赋予其纯数学理论上的重要性，有PCP理论和NP完备理论赋予其算法理论上的重要性。这些理论从根本上依赖P与NP关系问题的某些假设，或者本身就是试图去理解NP和P关系问题而发展出来的。计算复杂性理论的基本的主题之一是算法所需资源的下界。<br><font color=pink>b</font>.“P&#x2F;NP”问题，这里的P指多项式时间，假如NP问题能找到算法使其在多项式时间内解决，也就证明了P&#x3D;NP<br><font color=pink>c</font>.如果P&#x3D;NP，那么每个答案很容易得到验证的问题也同样可以轻松求解，这将对计算机安全构成巨大威胁。目前加密系统的破解就相当于要将一个整数分解成几个因数的乘积，正是其求解过程的繁琐，才能杜绝黑客入侵。如果证明了P&#x3D;NP，那么依据计算复杂性的密码就没有用途。如果P&#x3D;NP，那么所有的NP问题都存在有效的解决方案，而对于NP-hard问题，及时P&#x3D;NP，也不一定有解。同时如果证明了P!&#x3D;NP，那么大素数的分解还是不是NPC的？证明RSA、DES等密码的安全性比证明P&#x2F;NP还困难。</p><h2 id="20-简述Cook-Levin定理，为什么该定理如此重要？"><a href="#20-简述Cook-Levin定理，为什么该定理如此重要？" class="headerlink" title="20.简述Cook-Levin定理，为什么该定理如此重要？"></a>20.简述Cook-Levin定理，为什么该定理如此重要？</h2><p><font color=pink>Cook-Levin定理</font>：表明布尔可满足问题是NPC的。也就是说，NP中的任何问题都可以通过DTM在多项式时间内减少到确定布尔公式是否可满足的问题。如果可以在多项式时间内通过非确定性算法求解，则决策问题在NP中。<br><font color=pink>为什么如此重要</font>：给定NP中的任何决策问题，构造一个在多项式时间内解决它的非确定性机器。然后，对于该机器的每个输入，构建一个布尔表达式，表示输入传递给机器，机器正确运行并停止回答“是”。证明表明NP中的任何问题都可以在多项式时间中减少到布尔可满足问题的实例。这意味着如果布尔可满足问题可以通过确定性图灵机在多项式时间内解决，则NP中的所有问题都可以在多项式时间内求解，因此证明P&#x3D;NP</p><h2 id="21-什么是归约？常见的归约方法？"><a href="#21-什么是归约？常见的归约方法？" class="headerlink" title="21.什么是归约？常见的归约方法？"></a><font color=red>21.什么是归约？常见的归约方法？</font></h2><p><font color=pink>归约</font>：一个问题A可以归约到一个问题B的含义是可以用解决B的方法解决A，也就是说找到了解决A的方法。因此可知，问题A不一定比问题B难，<font color=pink>即B更难</font>至少两个问题是同样难度的。<br><font color=pink>详细定义</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于问题A和问题B，如果存在一个可计算的函数f，使得对于任意问题A的实例x有：</span><br></pre></td></tr></table></figure><p>$$<br>A(x) &#x3D; B(f(x))<br>$$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们就说问题A可以被归约到问题B</span><br><span class="line">归约方法：Many-one归约，图灵归约，Karp归约，Levin归约，Cook归约</span><br></pre></td></tr></table></figure><h2 id="22-如何判定一个问题是NPC问题？"><a href="#22-如何判定一个问题是NPC问题？" class="headerlink" title="22.如何判定一个问题是NPC问题？"></a><font color=red>22.如何判定一个问题是NPC问题？</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.是一个NP问题</span><br><span class="line">b.所有NP问题都可归约到它</span><br><span class="line">（见18）</span><br></pre></td></tr></table></figure><h2 id="23-什么是停机判定问题？其哲学思想是什么？"><a href="#23-什么是停机判定问题？其哲学思想是什么？" class="headerlink" title="23.什么是停机判定问题？其哲学思想是什么？"></a><font color=red>23.什么是停机判定问题？其哲学思想是什么？</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">停机判定：给定一个图灵机T和一个任意语言集合S，T是否会最终停机于每一个s∈S。</span><br><span class="line">        即判定一个程序是否会在有限的时间内结束运行。</span><br><span class="line">意义：其意义相同与可确定语言。显然任意有限S是可判定性的，可列S也是停机的。</span><br><span class="line">     即所有能行和计算的算法都是可以得到确定性答案而停机；或</span><br><span class="line">     不存在可以解决问题的确定性算法。</span><br></pre></td></tr></table></figure><p><font color=brown>注：“停机问题”不可判定意味着“可计算的”机器不能肯定自己的“可计算性”，停机问题这种悖论式解释判定问题只会让问题更难。</font></p><h2 id="24-求解NP问题的一般方法？"><a href="#24-求解NP问题的一般方法？" class="headerlink" title="24.求解NP问题的一般方法？"></a>24.求解NP问题的一般方法？</h2><p>a.<font color=pink>动态规划法与分支界限法</font>：对于许多NPC问题来说，用此方法可以得到较高的解题效率？<br>b.<font color=pink>概率分析</font>：对于许多NPC问题，其困难实例出现概率小，平均性能好<br>c.<font color=pink>近似算法</font>：近似解代替最优解<br>d.<font color=pink>启发式算法</font>：别的方法不奏效</p><h2 id="25-2SAT为什么是P问题？"><a href="#25-2SAT为什么是P问题？" class="headerlink" title="25.2SAT为什么是P问题？"></a><font color=red>25.2SAT为什么是P问题？</font></h2><p><font color=pink>2SAT</font>问题之所以属于P问题，是因为存在一种多项式时间复杂度的算法来解决它，也就是<font color=pink>强连通分量算法</font>。其将2SAT问题转化为<font color=pink>有向图问题</font>，并查找图中的强连通分量。此算法可以在多项式时间内完成。</p><p><font color=pink>证明如下</font>：</p><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627212515843.png" alt="image-20230627212515843"></p><p>[注]：如果xi和 ¬xi属于同一强连通分量，即互相可达，肯定是矛盾式。</p><p>构造一张有向图G，把其中的每个变量拆成两个节点<strong>2i</strong>和<strong>2i+1</strong>，分别表示<strong>xi</strong>为假和<strong>xi</strong>为真，最后要为每个变量选择其中一个节点打标记。对于“<strong>xi</strong>为假或<strong>xj</strong>为假”这样的条件，我们连一条有向边<br>$$<br>2i+1&#x3D;&gt;2j<br>$$<br>表示<strong>xi</strong>为真时<strong>xj</strong>必须为假，同理，还需要连一条有向边<br>$$<br>2j+1&#x3D;&gt;2i<br>$$<br>其他条件类似，每个条件对应两条“<strong>对称</strong>”的边，整张图实际上描述了一系列必须满足的关系，选择<strong>u</strong>的情况下必须选择它所能到的所有点。</p><p>对于一个没有打标记的变量<strong>xi</strong>，我们先假定它为假，然后标记节点<strong>2i</strong>，并且沿着有向边标记所有能标记的节点。如果标记过程中发现某个变量对应的两个节点都被标记，则“<strong>xi</strong>为假”这个假定不成立，需要改成“<strong>xi</strong>为真，然后重新标记。整个算法没有回溯过程，如果当前考虑的变量不管赋值为真还是假都会引起矛盾，可以证明整个2SAT问题无解。</p><h2 id="26-什么是随机算法？作用和意义？举例"><a href="#26-什么是随机算法？作用和意义？举例" class="headerlink" title="26.什么是随机算法？作用和意义？举例"></a><font color=red>26.什么是随机算法？作用和意义？举例</font></h2><p><font color=pink>随机算法</font>是一种使用概率和统计方法在其执行过程中对于下一计算步骤做出随机选择的算法。通常包括：随机生成的随机数和根据这些随机数做出的决策</p><p><font color=pink>作用和意义</font>：</p><ul><li>避免陷入局部最优解</li><li>探索解空间</li><li>增加解多样性</li><li>提高效率举例</li></ul><p><font color=pink>举例</font>：数值概率算法、蒙特卡洛算法、拉斯维加斯算法、舍伍德算法；</p><ul><li><p>蒙特卡洛算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用于求问题的准确解</span><br><span class="line">对于许多问题来说，近似解无意义，如判定问题；</span><br><span class="line">但所得到的解不一定正确</span><br><span class="line">求得正确解的概率依赖于算法所用的时间，时间越多，概率越大</span><br><span class="line">缺点：无法有效地判别解的正确性</span><br></pre></td></tr></table></figure></li><li><p>拉斯维加斯算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拉斯维加斯算法会得到正确的解；</span><br><span class="line">但算法有时会找不到解</span><br><span class="line">多次求解可减小求解失效的概率</span><br></pre></td></tr></table></figure></li><li><p>舍伍德算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">算法总能求得解，并且解是正确的</span><br><span class="line">当一个确定性算法</span><br><span class="line">在最坏情况下的计算复杂性与其在平均情况下的计算复杂性有较大差别时，</span><br><span class="line">可在这个确定性算法中引入随机性；</span><br><span class="line">将其改造为舍伍德算法，减少差别</span><br></pre></td></tr></table></figure></li></ul><h2 id="27-单向函数的意义及作用？举例"><a href="#27-单向函数的意义及作用？举例" class="headerlink" title="27.单向函数的意义及作用？举例"></a>27.单向函数的意义及作用？举例</h2><p><font color=pink>单向函数</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对于每一个输入，函数值在多项式时间内可解；</span><br><span class="line">对于随机的函数值，无法在多项式时间内使用确定性图灵机计算；</span><br></pre></td></tr></table></figure><p><font color=pink>意义和作用</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：单向函数一般用于产生消息摘要、密钥加密等，常见有MD5，SHA；</span><br><span class="line">提供数据的保密性、完整性和认证性。</span><br><span class="line">它们为密码学和信息安全领域提供了可靠的工具，使得加密和安全通信成为可能。</span><br><span class="line"></span><br><span class="line">意义：如果单向函数存在，将证明复杂性类P/NP问题中，P不等于NP。</span><br></pre></td></tr></table></figure><h2 id="28-交互式证明思想和方法？举例"><a href="#28-交互式证明思想和方法？举例" class="headerlink" title="28.交互式证明思想和方法？举例"></a><font color=red>28.交互式证明思想和方法？举例</font></h2><p><font color=pink>完备性</font>：如果x∈L，则存在一个证明者P使得验证者V能以多项式时间接受x（且接受的概率大于2&#x2F;3）</p><p><font color=pink>可靠性</font>：如果x∉L，对于所有的证明者P，V接受x的概率不会超过1&#x2F;3</p><p>能被交互式系统解决的问题记为IP类问题，可以证明NP ⊆ IP</p><p><font color=pink>应用</font>：对典型的实际应用就是<font color=pink>零知识证明</font></p><p><font color=pink>图的三色问题</font>：为一个无向图的每个节点涂色(红、绿、蓝)，使得相邻节点颜色不同、在交互式证明中，证明者可以声称找到了一个图的有效的三色方案，并于验证者进行交互验证方案的正确性。交互过程如下：</p><ul><li>验证者随机选择图的一些节点，并要求证明者提供这些节点的颜色方案。</li><li>证明者根据自己的声称方案提供节点的颜色，并将这些颜色发给验证者。</li><li>验证者检查证明者提供的颜色方案是否满足相邻节点颜色不同的条件。</li><li>如果这个验证者发现任何错误，他可以指正并要求证明者提供更多的证据或者修正错误。</li><li>这个过程可以继续，知道验证者对证明者的声称满意。</li></ul><p>除了该问题，交互式证明思想还用于素性测试(?)、证明性密码学等领域。</p><h2 id="29-对角线方法思想？举例"><a href="#29-对角线方法思想？举例" class="headerlink" title="29.对角线方法思想？举例"></a>29.对角线方法思想？举例</h2><p><font color=pink>思想</font>：利用对角线上的值做反证法。</p><p><font color=pink>证明 <strong>N !&#x3D; R</strong>,自然数集与实数集不存在一一对应</font>:</p><ul><li><p>假设：<font color=blue>自然数集N</font>和<font color=green>实数集R</font>之间，一定存在映射，即<strong>N</strong>可以进行一一列举出来，f(1)，f(2)….f(n),</p><p>f(n)对应的是实数，将其限制在[0,1]之间；</p><p>[0,1]之间的实数与整个实数集一定存在一一对应关系。</p></li><li><p>证明<font color=blue>自然数集N</font>和<font color=green>[0,1]区间内的实数</font>，不可能存在一一对应关系：</p><p>f(n)是一个[0,1]区间内的实数，则可以写成</p><p>f(1) &#x3D; 0.a11a12a13…</p><p>f(2) &#x3D; 0.a21a22a23…</p><p><strong>.</strong></p><p><strong>.</strong></p><p><strong>.</strong></p><p>f(n) &#x3D; 0.an1an2…ann，其中a的值是0-9中的一个数字；</p><p>假设存在一个f是从<font color=blue>自然数集N</font>和<font color=green>[0,1]区间内的实数</font>的一一映射，对于对角线上的元素a11，a22，…，ann</p><p>设计一个实数 b &#x3D; b1b2…bn，其中要求：<font color=red>bi !&#x3D; aii</font></p><p>如果<font color=blue>自然数集N</font>和<font color=green>[0,1]区间内的实数</font>是一一对应的，那么<font color=red>一定可以找到一个自然数k</font>，与实数b &#x3D; b1b2…bn对应，实数b一定等于f(k);</p><p>与假设<font color=red>矛盾</font>，设计过程要求<font color=red>bk !&#x3D; akk</font>，<font color=red>而f(k)中第k个数值一定是akk</font>，因此两个值不可能相等。</p></li></ul><h2 id="30-三种基本算法设计范式"><a href="#30-三种基本算法设计范式" class="headerlink" title="30.三种基本算法设计范式"></a>30.三种基本算法设计范式</h2><ul><li><font color=pink>有理论保证的算法</font><ul><li>精确算法</li><li>近似算法</li></ul></li><li><font color=pink>启发式算法</font><ul><li>在现实中往往有很好的性能</li><li>但有时候会崩溃或者性能很差</li></ul></li><li><font color=pink>机器学习习得的算法</font><ul><li>让机器自己学习一个算法</li><li>有一定通用性，但可解释性比较差</li></ul></li></ul><h2 id="31-剖析计算复杂性和密码安全的关系"><a href="#31-剖析计算复杂性和密码安全的关系" class="headerlink" title="31.剖析计算复杂性和密码安全的关系"></a>31.剖析计算复杂性和密码安全的关系</h2><p>计算复杂性理论和密码安全之间存在密切的关系。计算复杂性理论研究问题的难度和解决方案所需的计算资源之间的关系，而密码安全关注如何设计和实现安全的加密和解密算法以保护敏感信息。</p><p>在密码学中，我们希望设计的加密算法具有“计算上的安全性”，即使在有限的计算资源下，攻击者无法有效地破解加密算法。计算复杂性理论提供了关于问题的困难程度和计算资源的理论界限的概念，这对于评估和设计安全的密码算法至关重要。</p><p>例如，基于大整数因子分解问题的RSA加密算法，其安全性依赖于计算大整数的因子分解的困难性。如果存在一种高效算法可以在多项式时间内分解大整数，那么RSA算法的安全性将受到威胁。因此，计算复杂性理论的发展对于验证和加强RSA算法的安全性至关重要。</p><p>此外，计算复杂性理论还为密码学提供了一些基本的概念和工具，例如多项式时间算法、随机性、非确定性等，这些概念和工具被广泛应用于密码学的设计和分析中。</p><p>总之，计算复杂性理论为我们提供了一种理论基础和工具，帮助我们分析和评估密码算法的安全性，并为设计和实现安全的加密算法提供指导。它在密码学的研究和实践中起着重要的作用，确保我们能够设计出抵御计算攻击的强密码系统。</p><h2 id="32-如何理解：计算复杂性理论是计算机科学的哲学"><a href="#32-如何理解：计算复杂性理论是计算机科学的哲学" class="headerlink" title="32.如何理解：计算复杂性理论是计算机科学的哲学"></a>32.如何理解：计算复杂性理论是计算机科学的哲学</h2><ol><li><p>抽象与本质：计算复杂性理论关注问题的本质难度和计算资源之间的关系，它不仅关注具体的算法和实现细节，而是更关注问题的可计算性和难解性。这使得计算复杂性理论具有哲学性质，它探索问题的本质特征和计算的边界。</p></li><li><p>问题的可计算性：计算复杂性理论关注哪些问题是可计算的，哪些问题是不可计算的。它探讨了计算问题的可解性和难解性，帮助我们理解问题的边界和局限性。这与哲学中的思考问题的可知性和认知边界的思想密切相关。</p></li><li><p>算法和计算模型的研究：计算复杂性理论研究了各种算法和计算模型的性质和特征，包括多项式时间算法、非确定性算法、随机算法等。这些研究使得计算复杂性理论具有对计算机科学中基本概念和模型的哲学思考。</p></li><li><p>计算的局限性：计算复杂性理论探讨了计算的局限性和困难性，例如NP完全性理论表明一类问题的解决是困难的，没有高效算法可以解决这些问题。这使得计算复杂性理论与哲学中的认识论和存在论等思想产生共鸣。</p></li></ol><h2 id="33-如何理解随机算法在密码学中的作用和地位？"><a href="#33-如何理解随机算法在密码学中的作用和地位？" class="headerlink" title="33.如何理解随机算法在密码学中的作用和地位？"></a><font color=red>33.如何理解随机算法在密码学中的作用和地位？</font></h2><p><font color=pink>随机算法</font>生成的随机数在密码学中占有重要的地位，几乎所有的密码算法都要用到一些对攻击者来说必须是秘密的数据，而其中<font color=pink>密钥必须是随机数</font>。</p><h2 id="34-简述素数问题PRIME及其复杂性分析？"><a href="#34-简述素数问题PRIME及其复杂性分析？" class="headerlink" title="34.简述素数问题PRIME及其复杂性分析？"></a>34.简述素数问题PRIME及其复杂性分析？</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定M，求[0,M]中素数的个数</span><br></pre></td></tr></table></figure></blockquote><p><font color=orange>复杂性分析</font>：<br><font color=pink>穷举法</font>：<br>$$<br>O(N^2)<br>$$<br><font color=pink>检测到根号N</font>：<br>$$<br>O(根号N)<br>$$<br><font color=pink>埃拉托色尼筛选算法</font>：<br>$$<br>O(根号N&#x2F;logN)<br>$$<br><font color=pink>欧拉筛选法</font>：<br>$$<br>O(N)<br>$$</p><h2 id="35-简述零知识证明的基本思想"><a href="#35-简述零知识证明的基本思想" class="headerlink" title="35.简述零知识证明的基本思想"></a>35.简述零知识证明的基本思想</h2><p>证明者能够在不向验证者提供任何新知识的情况下，使验证者相信某个断言或定理的真实性。</p><h2 id="36-一个算法问题交给你后，应该怎么处理？"><a href="#36-一个算法问题交给你后，应该怎么处理？" class="headerlink" title="36.一个算法问题交给你后，应该怎么处理？"></a>36.一个算法问题交给你后，应该怎么处理？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.建模：对输入参数和解给出形式化或半形式化的描述</span><br><span class="line">b.设计算法：采用什么算法设计</span><br><span class="line"> 正确性：是否所有实例均有正确解</span><br><span class="line">c.分析：分析算法效率</span><br></pre></td></tr></table></figure><h2 id="37-计算复杂性理论的认识？对今后学习的启发？"><a href="#37-计算复杂性理论的认识？对今后学习的启发？" class="headerlink" title="37.计算复杂性理论的认识？对今后学习的启发？"></a>37.计算复杂性理论的认识？对今后学习的启发？</h2><p>计算复杂性理论是计算机科学的一个重要分支，它研究计算问题的难解性和可解性。通过分析问题的复杂性，计算复杂性理论可以帮助我们理解何时可以期望找到高效算法来解决问题，以及何时问题可能是困难甚至是不可解的。</p><p>对于今后的学习，计算复杂性理论给我们带来了以下几个方面的启发：</p><ol><li><p>算法设计的重要性：计算复杂性理论告诉我们，并非所有的问题都可以通过高效的算法解决。对于某些问题，可能不存在多项式时间内解决它们的算法。因此，在学习算法设计和问题求解时，需要考虑问题的复杂性，并寻找合适的算法来解决。</p></li><li><p>问题的可证明性：计算复杂性理论研究问题的难解性和可解性，它提供了一种形式化的框架来研究问题是否可以在有效的时间内解决。这启发我们思考问题的本质和边界，以及寻找问题的可证明性和难解性。</p></li><li><p>理论与实践的结合：计算复杂性理论不仅仅关注问题的理论分析，还与实际问题密切相关。它为算法设计和问题求解提供了基本的指导原则和方法。通过理解计算复杂性理论，我们可以更好地理解和设计高效的算法，提高计算问题的解决效率。</p></li><li><p>密码学和安全性的研究：计算复杂性理论对密码学和安全性的研究有重要的影响。它提供了分析密码算法安全性的工具和方法，帮助我们设计和评估安全的加密算法。</p></li></ol><p>综上所述，计算复杂性理论对于我们理解问题的复杂性、算法设计和问题求解具有重要的启发作用。它提醒我们在实际问题中注重算法效率，并帮助我们更好地理解问题的可解性和难解性，促进了密码学和安全性领域的研究。</p><h2 id="38-结合计算复杂性理论浅谈对云计算、大数据、物联网、人工智能安全思考？"><a href="#38-结合计算复杂性理论浅谈对云计算、大数据、物联网、人工智能安全思考？" class="headerlink" title="38.结合计算复杂性理论浅谈对云计算、大数据、物联网、人工智能安全思考？"></a>38.结合计算复杂性理论浅谈对云计算、大数据、物联网、人工智能安全思考？</h2><p>计算复杂性理论在云计算、大数据、物联网和人工智能安全方面提供了一些重要的思考和指导。下面是对每个领域的简要讨论：</p><ol><li><p>云计算：云计算涉及大规模的计算和存储资源共享，因此安全性是一个关键问题。计算复杂性理论可以帮助我们评估云计算中的安全性问题，例如数据隐私和身份验证。通过分析问题的复杂性，我们可以确定哪些安全问题是难解的，需要采取特定的安全措施来保护数据和系统。</p></li><li><p>大数据：大数据处理涉及海量的数据集和复杂的数据分析算法。计算复杂性理论可以帮助我们设计高效的算法来处理大数据，并评估算法的可扩展性和计算成本。在大数据安全方面，计算复杂性理论也可以帮助我们研究数据加密和访问控制的有效方法，以保护敏感数据的安全。</p></li><li><p>物联网：物联网连接了大量的设备和传感器，因此安全性成为物联网应用的一个重要问题。计算复杂性理论可以帮助我们分析物联网中的安全协议和算法的复杂性，以确定它们是否足够安全和可行。此外，计算复杂性理论还可以帮助我们设计高效的认证和密钥管理方案，以确保物联网设备和通信的安全性。</p></li><li><p>人工智能：人工智能的发展越来越依赖于大规模的数据和复杂的算法模型。计算复杂性理论可以帮助我们评估人工智能算法的计算复杂性，并指导我们选择适当的算法和优化方法来提高性能和效率。在人工智能安全方面，计算复杂性理论还可以帮助我们分析和评估人工智能模型的鲁棒性和防御性，以抵御对抗性攻击和隐私侵犯。</p></li></ol><p>综上所述，计算复杂性理论为云计算、大数据、物联网和人工智能安全提供了思考和指导。它可以帮助我们评估问题的复杂性和可解性，设计高效的算法和安全方案，以保护数据和系统的安全性。</p><h2 id="39-N个乒乓球中有一个和其他的质量不同，用天平最少几次能称出来？"><a href="#39-N个乒乓球中有一个和其他的质量不同，用天平最少几次能称出来？" class="headerlink" title="39.N个乒乓球中有一个和其他的质量不同，用天平最少几次能称出来？"></a>39.N个乒乓球中有一个和其他的质量不同，用天平最少几次能称出来？</h2><p>不考虑最后得到的乒乓球质量和正常质量相比是大是小，最少需要[log3(2n+1)]；</p><p>考虑最后乒乓球质量的大小，最少需要[log3(2n+3)]；</p><h2 id="40-图灵机相关问题"><a href="#40-图灵机相关问题" class="headerlink" title="40.图灵机相关问题"></a>40.图灵机相关问题</h2><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627213831778.png" alt="image-20230627213831778" style="zoom:50%;" /><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627213850389.png" alt="image-20230627213850389" style="zoom:67%;" /><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627213943465.png" alt="image-20230627213943465" style="zoom:50%;" /><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627214049933.png" alt="image-20230627214049933" style="zoom:50%;" /><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627214329899.png" alt="image-20230627214329899" style="zoom:50%;" /><p>例题：<img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627214558204.png" alt="image-20230627214558204" style="zoom: 50%;" /></p><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627214910488.png" alt="image-20230627214910488"></p><details>    ![image-20230627214828247](https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627214828247.png)</details><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627214828247.png" alt="image-20230627214828247"></p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627215324421.png" alt="image-20230627215324421" style="zoom:67%;" /><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627215626212.png" alt="image-20230627215626212" style="zoom:50%;" /><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627220346752.png" alt="image-20230627220346752" style="zoom: 67%;" /><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627220402800.png" alt="image-20230627220402800" style="zoom:67%;" /><h2 id="41-NP问题之间归约？常见的NPC问题？"><a href="#41-NP问题之间归约？常见的NPC问题？" class="headerlink" title="41.NP问题之间归约？常见的NPC问题？"></a>41.NP问题之间归约？常见的NPC问题？</h2><p><font color=pink>NP问题归约</font>：(从上到下)</p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627205644167.png" alt="image-20230627205644167" style="zoom: 67%;" /><p><font color=pink>常见NPC问题</font>：</p><ul><li><p>布尔可满足性问题：是否存在一组变量使得问题可满足。</p></li><li><p>0-1整数规划</p></li><li><p>分团问题：一个图中是否有大小是k个的团。任意挑出k个点，可判断是不是一个团，所以问题是NP；</p><ul><li>setpacking</li><li>最小顶点覆盖</li></ul></li><li><p>图着色问题</p></li><li><p>背包问题</p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627211504443.png" alt="image-20230627211504443" style="zoom: 50%;" /></li></ul><h2 id="42-SAT、2SAT、3SAT"><a href="#42-SAT、2SAT、3SAT" class="headerlink" title="42.SAT、2SAT、3SAT"></a>42.SAT、2SAT、3SAT</h2><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230627212725004.png" alt="image-20230627212725004"></p><h2 id="43-素数判定的递归和非递归算法"><a href="#43-素数判定的递归和非递归算法" class="headerlink" title="43.素数判定的递归和非递归算法"></a>43.素数判定的递归和非递归算法</h2><p>递归：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">n,i</span>):</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">2</span>): <span class="keyword">return</span> n==<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> n%i == <span class="number">0</span>: <span class="keyword">return</span> false</span><br><span class="line"><span class="keyword">if</span> i*i&gt;n: <span class="keyword">return</span> true</span><br><span class="line"><span class="keyword">return</span> isPrime(n,i+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>非递归：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n&lt;=<span class="number">1</span>: <span class="keyword">return</span> false</span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">ifn%i == <span class="number">0</span>:<span class="keyword">return</span> false</span><br><span class="line"><span class="keyword">return</span> ture</span><br></pre></td></tr></table></figure><h2 id="44-为什么停机问题是不可判定的？"><a href="#44-为什么停机问题是不可判定的？" class="headerlink" title="44.为什么停机问题是不可判定的？"></a>44.为什么停机问题是不可判定的？</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/liusiqian0209/article/details/49837447">(118条消息) NP完全性理论简介_np完整性_liusiqian0209的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/liusiqian0209/article/details/49837447">(118条消息) NP完全性理论简介_np完整性_liusiqian0209的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/351638078">算法学习笔记(71): 2-SAT - 知乎 (zhihu.com)</a></p><p><a href="https://blog.sciencenet.cn/blog-2322490-933277.html">科学网—什么是“判定问题”？（2）－悖论、停机问题与NP - 柳渝的博文 (sciencenet.cn)</a></p><p><a href="%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98"></a>：<a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1qb41187AG?share_source=copy_web">https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1qb41187AG%3Fshare_source%3Dcopy_web</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/">大学</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/">大三下</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA/">复杂性理论</category>
      
      
      <category domain="http://example.com/tags/%E5%A4%8D%E4%B9%A0/">复习</category>
      
      
      <comments>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Android编程</title>
      <link>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/</link>
      <guid>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/</guid>
      <pubDate>Sun, 25 Jun 2023 11:43:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Android编程&quot;&gt;&lt;a href=&quot;#Android编程&quot; class=&quot;headerlink&quot; title=&quot;Android编程&quot;&gt;&lt;/a&gt;Android编程&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Android编程"><a href="#Android编程" class="headerlink" title="Android编程"></a>Android编程</h1><span id="more"></span><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="Android应用程序编译过程"><a href="#Android应用程序编译过程" class="headerlink" title="Android应用程序编译过程"></a>Android应用程序编译过程</h3><p>（1）aapt编译应用程序中使用的各种资源</p><p>（2）aidl将aidl文件转换为Java接口</p><p>（3）所有的Java文件，包括应用中的源代码以及生成的R.java文件和Java接口，都将通过Java编译器编译后生成.class字节码文件，.class字节码文件是Java虚拟机可执行的文件。</p><p>（4）所有的.class文件，都将通过dex工具编译成.dex文件。.dex文件是Android虚拟机Dalvik可执行的文件。</p><p>（5）apk构建工具将.dex文件打包，生成可运行的.apk文件。</p><p>（6）签名压缩apk文件，进行优化。</p><h3 id="Android应用程序的运行过程"><a href="#Android应用程序的运行过程" class="headerlink" title="Android应用程序的运行过程"></a>Android应用程序的运行过程</h3><p>（1）读取build.grandle文件，获得应用编译的基本信息。</p><p>（2）AndroidManifest.xml清单文件，包含命名空间，应用程序包名，应用信息，是否允许备份，应用程序的图标，标签，是否支持Rtl，圆角矩形图标，应用程序的主题，Activity名称，启动的过滤条件，入口。</p><p>（3）根据配置找到启动的类MainActivity并创建对象。</p><p>（4）自动调用onCreate()方法，设置activity_main.xml布局文件</p><h3 id="res目录下各文件夹与R-java中的类与成员变量之间有什么关系？"><a href="#res目录下各文件夹与R-java中的类与成员变量之间有什么关系？" class="headerlink" title="res目录下各文件夹与R.java中的类与成员变量之间有什么关系？"></a>res目录下各文件夹与R.java中的类与成员变量之间有什么关系？</h3><p>对于drawable、layout、menu文件夹下的每一个文件都分别会在R.java文件里面生成drawable、layout、menu类的一个常量，类名就是文件夹的名字，常量的名字就是文件名字。</p><p>对于values文件夹下面的文件是根据文件里面的内容来生成相应的类常量，此文件夹下xml文件的根节点是resources，里面的标签名就是类名，属性就是常量名。</p><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230625193619207.png" alt="image-20230625193619207"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/test/">test</category>
      
      <category domain="http://example.com/categories/test/test1/">test1</category>
      
      
      <category domain="http://example.com/tags/test/">test</category>
      
      
      <comments>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2023/06/03/hello-world/</link>
      <guid>http://example.com/2023/06/03/hello-world/</guid>
      <pubDate>Sat, 03 Jun 2023 06:53:14 GMT</pubDate>
      
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/06/03/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
