<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>七天太乐</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>七天都要快乐 (★≧▽^))★☆</description>
    <pubDate>Mon, 26 Jun 2023 08:58:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>复杂性理论复习</title>
      <link>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/</link>
      <guid>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/</guid>
      <pubDate>Mon, 26 Jun 2023 06:58:32 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;复杂性理论复习综述&quot;&gt;&lt;a href=&quot;#复杂性理论复习综述&quot; class=&quot;headerlink&quot; title=&quot;复杂性理论复习综述&quot;&gt;&lt;/a&gt;复杂性理论复习综述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;理论计算机的核心目标：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;把计算任务按照其本质难度进行分类&lt;/font&gt;                                                     &lt;img src=&quot;https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230626150513090.png&quot; alt=&quot;image-20230626150513090&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;复习重点：判定问题；图灵机构造和基本思想；什么是P、NP、NPC问题及NP问题之间的规约和常见的NPC问题；SAT、2SAT、3SAT问题；递归算法和非递归算法特点和区别；复杂度分析方法区别；会写素数判定的递归和非递归算法&lt;/font&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="复杂性理论复习综述"><a href="#复杂性理论复习综述" class="headerlink" title="复杂性理论复习综述"></a>复杂性理论复习综述</h1><p><strong>理论计算机的核心目标：</strong></p><p><font color=red>把计算任务按照其本质难度进行分类</font>                                                     <img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230626150513090.png" alt="image-20230626150513090"></p><p><font color=red>复习重点：判定问题；图灵机构造和基本思想；什么是P、NP、NPC问题及NP问题之间的规约和常见的NPC问题；SAT、2SAT、3SAT问题；递归算法和非递归算法特点和区别；复杂度分析方法区别；会写素数判定的递归和非递归算法</font></p><span id="more"></span><h2 id="1-什么是可计算问题？什么是不可计算问题？"><a href="#1-什么是可计算问题？什么是不可计算问题？" class="headerlink" title="1.什么是可计算问题？什么是不可计算问题？"></a>1.什么是可计算问题？什么是不可计算问题？</h2><p>当且仅当该问题可以在图灵机上经过有限步骤后可以得到正确的结果。相反地，不能由图灵机解决的问题叫做不可计算问题。</p><h2 id="2-什么是计算复杂性？计算复杂性理论主要研究什么？"><a href="#2-什么是计算复杂性？计算复杂性理论主要研究什么？" class="headerlink" title="2.什么是计算复杂性？计算复杂性理论主要研究什么？"></a>2.什么是计算复杂性？计算复杂性理论主要研究什么？</h2><p>计算复杂性就是用计算机求解问题的难易程度，使用数学方法对计算中所需的各种资源消耗作定量的分析，并研究各类问题之间在计算复杂程度上的相互关系和性质。                                     主要研究计算问题时所需要的资源，比如时间和空间，以及如何尽可能的节省这些资源。</p><h2 id="3-什么是算法？算法有哪些特点？"><a href="#3-什么是算法？算法有哪些特点？" class="headerlink" title="3.什么是算法？算法有哪些特点？"></a>3.什么是算法？算法有哪些特点？</h2><p>算法是对解决方案的准确而完整的描述。                                                                                                              特点：有穷性，可行性，确定性，输入和输出</p><h2 id="4-描述算法的方法有？"><a href="#4-描述算法的方法有？" class="headerlink" title="4.描述算法的方法有？"></a>4.描述算法的方法有？</h2><p>自然语言、流程图、N-S图、伪代码、程序设计语言</p><h2 id="5-如何分析算法的效率？"><a href="#5-如何分析算法的效率？" class="headerlink" title="5.如何分析算法的效率？"></a><font color=red>5.如何分析算法的效率？</font></h2><p>算法的效率分析指对算法在运行时间和存储空间这两种资源的利用效率进行研究。对于一般算法，关注其输入规模，运行时间的度量单位，增长效率和算法的最优最差平均效率；对于递归算法，则需要关注递归的深度，先对算法建立一个递归关系，设置初始条件，在求解分析。</p><h2 id="6-渐进表达式O-g-n-，Θ-g-n-，Ω-g-n-的定义和表达含义？"><a href="#6-渐进表达式O-g-n-，Θ-g-n-，Ω-g-n-的定义和表达含义？" class="headerlink" title="6.渐进表达式O(g(n))，Θ(g(n))，Ω(g(n))的定义和表达含义？"></a><font color=red>6.渐进表达式O(g(n))，Θ(g(n))，Ω(g(n))的定义和表达含义？</font></h2><p>O(g(n))：如果函数t(n)包含在O(g(n))中，对于所有足够大的n，t(n)的上界由g(n)的常数倍确定，即存在大于0的常数和非负的整数n0使得对于所有的 n≥n0 ，有 cg(n)≥t(n)<br>表达含义：g(n)≥该算法的时间复杂度</p><p>Θ(g(n))：如果函数t包含在Θ(g(n))中，对于所有足够大的n，t(n)的上下界都由g的常数倍确定，即存在大于0的常数c1,c2和非负的整数n0使得所有 n≥n0 ，有 c1g(n)≥t(n)≥c2g(n)<br>表达含义：g(n)&#x3D;该算法的时间复杂度</p><p>Ω(g(n))：<br>表达含义：该算法的时间复杂度≥g(n)</p><h2 id="7-递归和非递归算法时间效率的数学分析方法区别？"><a href="#7-递归和非递归算法时间效率的数学分析方法区别？" class="headerlink" title="7.递归和非递归算法时间效率的数学分析方法区别？"></a><font color=red>7.递归和非递归算法时间效率的数学分析方法区别？</font></h2><p>见5</p><h2 id="8-Fibonacci-numbers-F-N-x3D-F-N-1-F-N-2-的时间复杂度表达式？"><a href="#8-Fibonacci-numbers-F-N-x3D-F-N-1-F-N-2-的时间复杂度表达式？" class="headerlink" title="8.Fibonacci numbers F(N) &#x3D; F(N-1) + F(N-2)的时间复杂度表达式？"></a>8.Fibonacci numbers F(N) &#x3D; F(N-1) + F(N-2)的时间复杂度表达式？</h2><p>递归法：O(2^N)<br>公式计算法：O(1)</p><h2 id="9-经典排序问题的算法时间复杂度下界？"><a href="#9-经典排序问题的算法时间复杂度下界？" class="headerlink" title="9.经典排序问题的算法时间复杂度下界？"></a>9.经典排序问题的算法时间复杂度下界？</h2><table><thead><tr><th align="center">排序方法</th><th align="center">时间复杂度(平均)</th><th align="center">时间复杂度(最坏)</th><th align="center">时间复杂度(最好)</th><th align="center">空间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">插入排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O(n^1.3)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">快速排序</td><td align="center">O(nlogn)</td><td align="center">O(n^2)</td><td align="center">O(nlogn)</td><td align="center">O(logn)</td><td align="center">不稳定</td></tr><tr><td align="center">冒泡排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">基数排序</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">桶排序</td><td align="center">O(n+k)</td><td align="center">O(n^2)</td><td align="center">O(n)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr></tbody></table><h2 id="10-算法性能提升的本质是什么？提升算法效率的四个层次是什么？"><a href="#10-算法性能提升的本质是什么？提升算法效率的四个层次是什么？" class="headerlink" title="10.算法性能提升的本质是什么？提升算法效率的四个层次是什么？"></a>10.算法性能提升的本质是什么？提升算法效率的四个层次是什么？</h2><p>提升的本质：本质式效率，就是让计算机少做事情。效率&#x3D;产出&#x2F;所做的事，产出难提高，所做事情可以减少<br>四个层次：正确性；易读性；健壮性；时空性。</p><h2 id="11-为什么超越多项式时间复杂度的精确算法一般是不可接受的？"><a href="#11-为什么超越多项式时间复杂度的精确算法一般是不可接受的？" class="headerlink" title="11.为什么超越多项式时间复杂度的精确算法一般是不可接受的？"></a><font color=red>11.为什么超越多项式时间复杂度的精确算法一般是不可接受的？</font></h2><p>时间复杂度并不表示一个程序解决需要多少时间，而是当问题规模扩大后，程序需要的时间随规模的增长有多快。<br>一个优化问题如果已经找到了多项式时间算法，称该问题为多项式时间可解问题，并将这类问题的集合记为P，即多项式时间可解问题为P类问题。<br>一个问题没有找到多项式时间算法，在直觉上他是“难解”的，但又无法证明多项式时间算法的不存在性。一方面证明一个问题不存在多项式时间算法是困难的；另一方面，有越来越多的问题无法给出多项式时间算法。<br>NP-完全性理论的核心思想：如果一个问题是NP类问题，并且存在一个能够在多项式时间内转换为该问题的解的算法，那么该问题就是NP-完全问题。一个问题是NP-完全问题意味着他是NP类问题中最困难的问题之一。其重要性在于：如果能够证明某个问题是NP-完全问题，那么就可以推导出其他许多问题也是NP-完全问题。</p><h2 id="12-什么是图灵机？什么是图灵测试？什么是图灵命题？"><a href="#12-什么是图灵机？什么是图灵测试？什么是图灵命题？" class="headerlink" title="12.什么是图灵机？什么是图灵测试？什么是图灵命题？"></a><font color=red>12.什么是图灵机？什么是图灵测试？什么是图灵命题？</font></h2><p>图灵机：又称图灵计算机，指一种抽象的计算模型，即将人使用纸笔进行数学运算的过程进行抽象，由一个虚拟机器替代人类进行数学运算。<br>其有一个无限长的纸带，纸带分成一个一个方格，每个方格有不同颜色，一个机器头在纸带上移动。机器头有一组内部状态和一些固定程序。每个时刻，机器头从当前纸带读入一个方格的信息，然后结合内部状态查找程序表，根据程序输出信息到纸带方格中，并转换自己的内部状态，进行移动。</p><p>图灵测试：指测试者和被测试者隔开的情况下，通过一些装置向被测试者随意提问。进行多次测试后，如果机器让平均每个参与者做出了超过30%的误判，那么这台机器就通过了测试，并认为具有人类智能。</p><p>图灵命题：可计算性理论的基本论题，一个函数是可计算的当且仅当可由一部图灵机来计算它。</p><h2 id="13-图灵机的基本原理及组成部分？什么是格局？"><a href="#13-图灵机的基本原理及组成部分？什么是格局？" class="headerlink" title="13.图灵机的基本原理及组成部分？什么是格局？"></a><font color=red>13.图灵机的基本原理及组成部分？什么是格局？</font></h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/">大学</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/">大三下</category>
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA/">复杂性理论</category>
      
      
      <category domain="http://example.com/tags/%E5%A4%8D%E4%B9%A0/">复习</category>
      
      
      <comments>http://example.com/2023/06/26/%E5%A4%8D%E6%9D%82%E6%80%A7%E7%90%86%E8%AE%BA%E5%A4%8D%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Android编程</title>
      <link>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/</link>
      <guid>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/</guid>
      <pubDate>Sun, 25 Jun 2023 11:43:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Android编程&quot;&gt;&lt;a href=&quot;#Android编程&quot; class=&quot;headerlink&quot; title=&quot;Android编程&quot;&gt;&lt;/a&gt;Android编程&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Android编程"><a href="#Android编程" class="headerlink" title="Android编程"></a>Android编程</h1><span id="more"></span><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="Android应用程序编译过程"><a href="#Android应用程序编译过程" class="headerlink" title="Android应用程序编译过程"></a>Android应用程序编译过程</h3><p>（1）aapt编译应用程序中使用的各种资源</p><p>（2）aidl将aidl文件转换为Java接口</p><p>（3）所有的Java文件，包括应用中的源代码以及生成的R.java文件和Java接口，都将通过Java编译器编译后生成.class字节码文件，.class字节码文件是Java虚拟机可执行的文件。</p><p>（4）所有的.class文件，都将通过dex工具编译成.dex文件。.dex文件是Android虚拟机Dalvik可执行的文件。</p><p>（5）apk构建工具将.dex文件打包，生成可运行的.apk文件。</p><p>（6）签名压缩apk文件，进行优化。</p><h3 id="Android应用程序的运行过程"><a href="#Android应用程序的运行过程" class="headerlink" title="Android应用程序的运行过程"></a>Android应用程序的运行过程</h3><p>（1）读取build.grandle文件，获得应用编译的基本信息。</p><p>（2）AndroidManifest.xml清单文件，包含命名空间，应用程序包名，应用信息，是否允许备份，应用程序的图标，标签，是否支持Rtl，圆角矩形图标，应用程序的主题，Activity名称，启动的过滤条件，入口。</p><p>（3）根据配置找到启动的类MainActivity并创建对象。</p><p>（4）自动调用onCreate()方法，设置activity_main.xml布局文件</p><h3 id="res目录下各文件夹与R-java中的类与成员变量之间有什么关系？"><a href="#res目录下各文件夹与R-java中的类与成员变量之间有什么关系？" class="headerlink" title="res目录下各文件夹与R.java中的类与成员变量之间有什么关系？"></a>res目录下各文件夹与R.java中的类与成员变量之间有什么关系？</h3><p>对于drawable、layout、menu文件夹下的每一个文件都分别会在R.java文件里面生成drawable、layout、menu类的一个常量，类名就是文件夹的名字，常量的名字就是文件名字。</p><p>对于values文件夹下面的文件是根据文件里面的内容来生成相应的类常量，此文件夹下xml文件的根节点是resources，里面的标签名就是类名，属性就是常量名。</p><p><img src="https://qitiantaile.oss-cn-guangzhou.aliyuncs.com/blog/image-20230625193619207.png" alt="image-20230625193619207"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/test/">test</category>
      
      <category domain="http://example.com/categories/test/test1/">test1</category>
      
      
      <category domain="http://example.com/tags/test/">test</category>
      
      
      <comments>http://example.com/2023/06/25/Android%E7%BC%96%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2023/06/03/hello-world/</link>
      <guid>http://example.com/2023/06/03/hello-world/</guid>
      <pubDate>Sat, 03 Jun 2023 06:53:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/06/03/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
